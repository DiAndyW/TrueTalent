{
    "data": {
        "problemsetQuestionList": {
            "total": 3530,
            "questions": [
                {
                    "frontendQuestionId": "1",
                    "title": "Two Sum",
                    "titleSlug": "two-sum",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function twoSum(nums: number[], target: number): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func twoSum(nums []int, target int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "2",
                    "title": "Add Two Numbers",
                    "titleSlug": "add-two-numbers",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: Optional[ListNode]\n        :type l2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (add-two-numbers l1 l2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\nadd_two_numbers(L1, L2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\n  def add_two_numbers(l1, l2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "3",
                    "title": "Longest Substring Without Repeating Characters",
                    "titleSlug": "longest-substring-without-repeating-characters",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int lengthOfLongestSubstring(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function lengthOfLongestSubstring(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func lengthOfLongestSubstring(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "4",
                    "title": "Median of Two Sorted Arrays",
                    "titleSlug": "median-of-two-sorted-arrays",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  double findMedianSortedArrays(List<int> nums1, List<int> nums2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (find-median-sorted-arrays nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\nfind_median_sorted_arrays(Nums1, Nums2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\n  def find_median_sorted_arrays(nums1, nums2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "5",
                    "title": "Longest Palindromic Substring",
                    "titleSlug": "longest-palindromic-substring",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* longestPalindrome(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function longestPalindrome(s: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String longestPalindrome(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func longestPalindrome(s string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (longest-palindrome s)\n  (-> string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "6",
                    "title": "Zigzag Conversion",
                    "titleSlug": "zigzag-conversion",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string convert(string s, int numRows) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String convert(String s, int numRows) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* convert(char* s, int numRows) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string Convert(string s, int numRows) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function convert(s: string, numRows: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $numRows\n     * @return String\n     */\n    function convert($s, $numRows) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func convert(_ s: String, _ numRows: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun convert(s: String, numRows: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String convert(String s, int numRows) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func convert(s string, numRows int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {Integer} num_rows\n# @return {String}\ndef convert(s, num_rows)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def convert(s: String, numRows: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn convert(s: String, num_rows: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (convert s numRows)\n  (-> string? exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec convert(S :: unicode:unicode_binary(), NumRows :: integer()) -> unicode:unicode_binary().\nconvert(S, NumRows) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec convert(s :: String.t, num_rows :: integer) :: String.t\n  def convert(s, num_rows) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "7",
                    "title": "Reverse Integer",
                    "titleSlug": "reverse-integer",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int reverse(int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int reverse(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def reverse(self, x: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int reverse(int x){\n\n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Reverse(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function reverse(x: number): number {\n\n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func reverse(_ x: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun reverse(x: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int reverse(int x) {\n\n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func reverse(x int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "8",
                    "title": "String to Integer (atoi)",
                    "titleSlug": "string-to-integer-atoi",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int myAtoi(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int myAtoi(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def myAtoi(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int myAtoi(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MyAtoi(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar myAtoi = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function myAtoi(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function myAtoi($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func myAtoi(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun myAtoi(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int myAtoi(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func myAtoi(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef my_atoi(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def myAtoi(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn my_atoi(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (my-atoi s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec my_atoi(S :: unicode:unicode_binary()) -> integer().\nmy_atoi(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec my_atoi(s :: String.t) :: integer\n  def my_atoi(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "9",
                    "title": "Palindrome Number",
                    "titleSlug": "palindrome-number",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isPalindrome(int x) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsPalindrome(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isPalindrome(x: number): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isPalindrome(x: Int): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isPalindrome(int x) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isPalindrome(x int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "10",
                    "title": "Regular Expression Matching",
                    "titleSlug": "regular-expression-matching",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isMatch(char* s, char* p) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isMatch(s: string, p: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isMatch(String s, String p) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isMatch(s string, p string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "11",
                    "title": "Container With Most Water",
                    "titleSlug": "container-with-most-water",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int maxArea(int* height, int heightSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function maxArea(height: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int maxArea(List<int> height) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func maxArea(height []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "12",
                    "title": "Integer to Roman",
                    "titleSlug": "integer-to-roman",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string intToRoman(int num) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* intToRoman(int num) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string IntToRoman(int num) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function intToRoman(num: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func intToRoman(_ num: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun intToRoman(num: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String intToRoman(int num) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func intToRoman(num int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (int-to-roman num)\n  (-> exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\nint_to_roman(Num) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "13",
                    "title": "Roman to Integer",
                    "titleSlug": "roman-to-integer",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int romanToInt(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function romanToInt(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int romanToInt(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func romanToInt(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (roman-to-int s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\nroman_to_int(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "14",
                    "title": "Longest Common Prefix",
                    "titleSlug": "longest-common-prefix",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* longestCommonPrefix(char** strs, int strsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function longestCommonPrefix(strs: string[]): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String longestCommonPrefix(List<String> strs) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func longestCommonPrefix(strs []string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (longest-common-prefix strs)\n  (-> (listof string?) string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlongest_common_prefix(Strs) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "15",
                    "title": "3Sum",
                    "titleSlug": "3sum",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function threeSum(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func threeSum(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "16",
                    "title": "3Sum Closest",
                    "titleSlug": "3sum-closest",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int threeSumClosest(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int ThreeSumClosest(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function threeSumClosest(nums: number[], target: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumClosest($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func threeSumClosest(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun threeSumClosest(nums: IntArray, target: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int threeSumClosest(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func threeSumClosest(nums []int, target int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_closest(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def threeSumClosest(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn three_sum_closest(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (three-sum-closest nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec three_sum_closest(Nums :: [integer()], Target :: integer()) -> integer().\nthree_sum_closest(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec three_sum_closest(nums :: [integer], target :: integer) :: integer\n  def three_sum_closest(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "17",
                    "title": "Letter Combinations of a Phone Number",
                    "titleSlug": "letter-combinations-of-a-phone-number",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** letterCombinations(char* digits, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function letterCombinations(digits: string): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun letterCombinations(digits: String): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> letterCombinations(String digits) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func letterCombinations(digits string) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (letter-combinations digits)\n  (-> string? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_combinations(Digits) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec letter_combinations(digits :: String.t) :: [String.t]\n  def letter_combinations(digits) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "18",
                    "title": "4Sum",
                    "titleSlug": "4sum",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> FourSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function fourSum(nums: number[], target: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function fourSum($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func fourSum(_ nums: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun fourSum(nums: IntArray, target: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> fourSum(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func fourSum(nums []int, target int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[][]}\ndef four_sum(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def fourSum(nums: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn four_sum(nums: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (four-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec four_sum(Nums :: [integer()], Target :: integer()) -> [[integer()]].\nfour_sum(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec four_sum(nums :: [integer], target :: integer) :: [[integer]]\n  def four_sum(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "19",
                    "title": "Remove Nth Node From End of List",
                    "titleSlug": "remove-nth-node-from-end-of-list",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type n: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RemoveNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $n\n     * @return ListNode\n     */\n    function removeNthFromEnd($head, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeNthFromEnd(head: ListNode?, n: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? removeNthFromEnd(ListNode? head, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeNthFromEnd(head: ListNode, n: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_nth_from_end(head: Option<Box<ListNode>>, n: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (remove-nth-from-end head n)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec remove_nth_from_end(Head :: #list_node{} | null, N :: integer()) -> #list_node{} | null.\nremove_nth_from_end(Head, N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec remove_nth_from_end(head :: ListNode.t | nil, n :: integer) :: ListNode.t | nil\n  def remove_nth_from_end(head, n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "20",
                    "title": "Valid Parentheses",
                    "titleSlug": "valid-parentheses",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isValid(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isValid(s: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isValid(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isValid(s string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "21",
                    "title": "Merge Two Sorted Lists",
                    "titleSlug": "merge-two-sorted-lists",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(list1, list2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $list1\n     * @param ListNode $list2\n     * @return ListNode\n     */\n    function mergeTwoLists($list1, $list2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeTwoLists(ListNode? list1, ListNode? list2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} list1\n# @param {ListNode} list2\n# @return {ListNode}\ndef merge_two_lists(list1, list2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-two-lists list1 list2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_two_lists(List1 :: #list_node{} | null, List2 :: #list_node{} | null) -> #list_node{} | null.\nmerge_two_lists(List1, List2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_two_lists(list1 :: ListNode.t | nil, list2 :: ListNode.t | nil) :: ListNode.t | nil\n  def merge_two_lists(list1, list2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "22",
                    "title": "Generate Parentheses",
                    "titleSlug": "generate-parentheses",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function generateParenthesis(n: number): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> generateParenthesis(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func generateParenthesis(n int) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "23",
                    "title": "Merge k Sorted Lists",
                    "titleSlug": "merge-k-sorted-lists",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[Optional[ListNode]]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List<ListNode?> lists) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\nmerge_k_lists(Lists) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "24",
                    "title": "Swap Nodes in Pairs",
                    "titleSlug": "swap-nodes-in-pairs",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* swapPairs(struct ListNode* head) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode SwapPairs(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction swapPairs(head: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function swapPairs($head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func swapPairs(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun swapPairs(head: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? swapPairs(ListNode? head) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc swapPairs(head *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef swap_pairs(head)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def swapPairs(head: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn swap_pairs(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (swap-pairs head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec swap_pairs(Head :: #list_node{} | null) -> #list_node{} | null.\nswap_pairs(Head) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec swap_pairs(head :: ListNode.t | nil) :: ListNode.t | nil\n  def swap_pairs(head) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "25",
                    "title": "Reverse Nodes in k-Group",
                    "titleSlug": "reverse-nodes-in-k-group",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type k: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseKGroup(struct ListNode* head, int k) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseKGroup(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function(head, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseKGroup(head: ListNode | null, k: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function reverseKGroup($head, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseKGroup(_ head: ListNode?, _ k: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseKGroup(head: ListNode?, k: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? reverseKGroup(ListNode? head, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef reverse_k_group(head, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseKGroup(head: ListNode, k: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_k_group(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (reverse-k-group head k)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec reverse_k_group(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\nreverse_k_group(Head, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec reverse_k_group(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\n  def reverse_k_group(head, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "26",
                    "title": "Remove Duplicates from Sorted Array",
                    "titleSlug": "remove-duplicates-from-sorted-array",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int removeDuplicates(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function removeDuplicates(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func removeDuplicates(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "27",
                    "title": "Remove Element",
                    "titleSlug": "remove-element",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int removeElement(int[] nums, int val) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int removeElement(int* nums, int numsSize, int val) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RemoveElement(int[] nums, int val) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function(nums, val) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function removeElement(nums: number[], val: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $val\n     * @return Integer\n     */\n    function removeElement(&$nums, $val) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func removeElement(_ nums: inout [Int], _ val: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun removeElement(nums: IntArray, `val`: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int removeElement(List<int> nums, int val) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func removeElement(nums []int, val int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} val\n# @return {Integer}\ndef remove_element(nums, val)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def removeElement(nums: Array[Int], `val`: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn remove_element(nums: &mut Vec<i32>, val: i32) -> i32 {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "28",
                    "title": "Find the Index of the First Occurrence in a String",
                    "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int strStr(char* haystack, char* needle) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function strStr(haystack: string, needle: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func strStr(haystack string, needle string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "29",
                    "title": "Divide Two Integers",
                    "titleSlug": "divide-two-integers",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int divide(int dividend, int divisor) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int divide(int dividend, int divisor) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Divide(int dividend, int divisor) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function divide(dividend: number, divisor: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int divide(int dividend, int divisor) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func divide(dividend int, divisor int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (divide dividend divisor)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\ndivide(Dividend, Divisor) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\n  def divide(dividend, divisor) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "30",
                    "title": "Substring with Concatenation of All Words",
                    "titleSlug": "substring-with-concatenation-of-all-words",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<int> FindSubstring(string s, string[] words) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function findSubstring(s: string, words: string[]): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> findSubstring(String s, List<String> words) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func findSubstring(s string, words []string) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn find_substring(s: String, words: Vec<String>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (find-substring s words)\n  (-> string? (listof string?) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [integer()].\nfind_substring(S, Words) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\n  def find_substring(s, words) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "31",
                    "title": "Next Permutation",
                    "titleSlug": "next-permutation",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void nextPermutation(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void nextPermutation(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void nextPermutation(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void NextPermutation(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction nextPermutation(nums: number[]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function nextPermutation(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func nextPermutation(_ nums: inout [Int]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun nextPermutation(nums: IntArray): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void nextPermutation(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func nextPermutation(nums []int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef next_permutation(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def nextPermutation(nums: Array[Int]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn next_permutation(nums: &mut Vec<i32>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "32",
                    "title": "Longest Valid Parentheses",
                    "titleSlug": "longest-valid-parentheses",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int longestValidParentheses(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function longestValidParentheses(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int longestValidParentheses(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func longestValidParentheses(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "33",
                    "title": "Search in Rotated Sorted Array",
                    "titleSlug": "search-in-rotated-sorted-array",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int search(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function search(nums: number[], target: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int search(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func search(nums []int, target int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search(Nums :: [integer()], Target :: integer()) -> integer().\nsearch(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: integer\n  def search(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "34",
                    "title": "Find First and Last Position of Element in Sorted Array",
                    "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function searchRange(nums: number[], target: number): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> searchRange(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func searchRange(nums []int, target int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search-range nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\nsearch_range(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\n  def search_range(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "35",
                    "title": "Search Insert Position",
                    "titleSlug": "search-insert-position",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int searchInsert(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function searchInsert(nums: number[], target: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int searchInsert(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func searchInsert(nums []int, target int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search-insert nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search_insert(Nums :: [integer()], Target :: integer()) -> integer().\nsearch_insert(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\n  def search_insert(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "36",
                    "title": "Valid Sudoku",
                    "titleSlug": "valid-sudoku",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isValidSudoku(char** board, int boardSize, int* boardColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsValidSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isValidSudoku(board: string[][]): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Boolean\n     */\n    function isValidSudoku($board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isValidSudoku(_ board: [[Character]]) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isValidSudoku(board: Array<CharArray>): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isValidSudoku(List<List<String>> board) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isValidSudoku(board [][]byte) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} board\n# @return {Boolean}\ndef is_valid_sudoku(board)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-valid-sudoku board)\n  (-> (listof (listof char?)) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_valid_sudoku(Board :: [[char()]]) -> boolean().\nis_valid_sudoku(Board) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_valid_sudoku(board :: [[char]]) :: boolean\n  def is_valid_sudoku(board) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "37",
                    "title": "Sudoku Solver",
                    "titleSlug": "sudoku-solver",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void solveSudoku(char** board, int boardSize, int* boardColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solveSudoku(board: string[][]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void solveSudoku(List<List<String>> board) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func solveSudoku(board [][]byte)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "38",
                    "title": "Count and Say",
                    "titleSlug": "count-and-say",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string countAndSay(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String countAndSay(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* countAndSay(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string CountAndSay(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function countAndSay(n: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function countAndSay($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func countAndSay(_ n: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun countAndSay(n: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String countAndSay(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func countAndSay(n int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {String}\ndef count_and_say(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def countAndSay(n: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn count_and_say(n: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (count-and-say n)\n  (-> exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec count_and_say(N :: integer()) -> unicode:unicode_binary().\ncount_and_say(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec count_and_say(n :: integer) :: String.t\n  def count_and_say(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "39",
                    "title": "Combination Sum",
                    "titleSlug": "combination-sum",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> CombinationSum(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function combinationSum(candidates: number[], target: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum($candidates, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> combinationSum(List<int> candidates, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func combinationSum(candidates []int, target int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum(candidates, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn combination_sum(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (combination-sum candidates target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec combination_sum(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\ncombination_sum(Candidates, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec combination_sum(candidates :: [integer], target :: integer) :: [[integer]]\n  def combination_sum(candidates, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "40",
                    "title": "Combination Sum II",
                    "titleSlug": "combination-sum-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum2(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function combinationSum2(candidates: number[], target: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum2($candidates, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun combinationSum2(candidates: IntArray, target: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> combinationSum2(List<int> candidates, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func combinationSum2(candidates []int, target int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum2(candidates, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def combinationSum2(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn combination_sum2(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (combination-sum2 candidates target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec combination_sum2(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\ncombination_sum2(Candidates, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec combination_sum2(candidates :: [integer], target :: integer) :: [[integer]]\n  def combination_sum2(candidates, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "41",
                    "title": "First Missing Positive",
                    "titleSlug": "first-missing-positive",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int firstMissingPositive(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function firstMissingPositive(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function firstMissingPositive($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func firstMissingPositive(_ nums: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun firstMissingPositive(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int firstMissingPositive(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func firstMissingPositive(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef first_missing_positive(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn first_missing_positive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (first-missing-positive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec first_missing_positive(Nums :: [integer()]) -> integer().\nfirst_missing_positive(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec first_missing_positive(nums :: [integer]) :: integer\n  def first_missing_positive(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "42",
                    "title": "Trapping Rain Water",
                    "titleSlug": "trapping-rain-water",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int trap(int* height, int heightSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function trap(height: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int trap(List<int> height) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func trap(height []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "43",
                    "title": "Multiply Strings",
                    "titleSlug": "multiply-strings",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string multiply(string num1, string num2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String multiply(String num1, String num2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* multiply(char* num1, char* num2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string Multiply(string num1, string num2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function multiply(num1: string, num2: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function multiply($num1, $num2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func multiply(_ num1: String, _ num2: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun multiply(num1: String, num2: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String multiply(String num1, String num2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func multiply(num1 string, num2 string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef multiply(num1, num2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def multiply(num1: String, num2: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn multiply(num1: String, num2: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (multiply num1 num2)\n  (-> string? string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmultiply(Num1, Num2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\n  def multiply(num1, num2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "44",
                    "title": "Wildcard Matching",
                    "titleSlug": "wildcard-matching",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isMatch(char* s, char* p) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isMatch(s: string, p: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isMatch(String s, String p) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isMatch(s string, p string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "45",
                    "title": "Jump Game II",
                    "titleSlug": "jump-game-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int jump(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int jump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int jump(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Jump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function jump(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function jump($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func jump(_ nums: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun jump(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int jump(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func jump(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef jump(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def jump(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn jump(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (jump nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec jump(Nums :: [integer()]) -> integer().\njump(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec jump(nums :: [integer]) :: integer\n  def jump(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "46",
                    "title": "Permutations",
                    "titleSlug": "permutations",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> Permute(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function permute(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func permute(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun permute(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> permute(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func permute(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (permute nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec permute(Nums :: [integer()]) -> [[integer()]].\npermute(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec permute(nums :: [integer]) :: [[integer]]\n  def permute(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "47",
                    "title": "Permutations II",
                    "titleSlug": "permutations-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> PermuteUnique(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function permuteUnique(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permuteUnique($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun permuteUnique(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> permuteUnique(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func permuteUnique(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute_unique(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn permute_unique(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (permute-unique nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec permute_unique(Nums :: [integer()]) -> [[integer()]].\npermute_unique(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec permute_unique(nums :: [integer]) :: [[integer]]\n  def permute_unique(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "48",
                    "title": "Rotate Image",
                    "titleSlug": "rotate-image",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void Rotate(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction rotate(matrix: number[][]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun rotate(matrix: Array<IntArray>): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void rotate(List<List<int>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func rotate(matrix [][]int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef rotate(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "49",
                    "title": "Group Anagrams",
                    "titleSlug": "group-anagrams",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function groupAnagrams(strs: string[]): string[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<String>> groupAnagrams(List<String> strs) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func groupAnagrams(strs []string) [][]string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (group-anagrams strs)\n  (-> (listof string?) (listof (listof string?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "50",
                    "title": "Pow(x, n)",
                    "titleSlug": "powx-n",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "double myPow(double x, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public double MyPow(double x, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function myPow(x: number, n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun myPow(x: Double, n: Int): Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  double myPow(double x, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func myPow(x float64, n int) float64 {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def myPow(x: Double, n: Int): Double = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "51",
                    "title": "N-Queens",
                    "titleSlug": "n-queens",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<string>> SolveNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function solveNQueens(n: number): string[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[][]\n     */\n    function solveNQueens($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func solveNQueens(_ n: Int) -> [[String]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun solveNQueens(n: Int): List<List<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<String>> solveNQueens(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func solveNQueens(n int) [][]string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {String[][]}\ndef solve_n_queens(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def solveNQueens(n: Int): List[List[String]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn solve_n_queens(n: i32) -> Vec<Vec<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (solve-n-queens n)\n  (-> exact-integer? (listof (listof string?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec solve_n_queens(N :: integer()) -> [[unicode:unicode_binary()]].\nsolve_n_queens(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec solve_n_queens(n :: integer) :: [[String.t]]\n  def solve_n_queens(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "52",
                    "title": "N-Queens II",
                    "titleSlug": "n-queens-ii",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int totalNQueens(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int totalNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int totalNQueens(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int TotalNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar totalNQueens = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function totalNQueens(n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function totalNQueens($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func totalNQueens(_ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun totalNQueens(n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int totalNQueens(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func totalNQueens(n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer}\ndef total_n_queens(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def totalNQueens(n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn total_n_queens(n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (total-n-queens n)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec total_n_queens(N :: integer()) -> integer().\ntotal_n_queens(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec total_n_queens(n :: integer) :: integer\n  def total_n_queens(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "53",
                    "title": "Maximum Subarray",
                    "titleSlug": "maximum-subarray",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int maxSubArray(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MaxSubArray(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function maxSubArray(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubArray($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func maxSubArray(_ nums: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun maxSubArray(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int maxSubArray(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func maxSubArray(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sub_array(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (max-sub-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec max_sub_array(Nums :: [integer()]) -> integer().\nmax_sub_array(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec max_sub_array(nums :: [integer]) :: integer\n  def max_sub_array(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "54",
                    "title": "Spiral Matrix",
                    "titleSlug": "spiral-matrix",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<int> SpiralOrder(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function spiralOrder(matrix: number[][]): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function spiralOrder($matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> spiralOrder(List<List<int>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func spiralOrder(matrix [][]int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef spiral_order(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (spiral-order matrix)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec spiral_order(Matrix :: [[integer()]]) -> [integer()].\nspiral_order(Matrix) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec spiral_order(matrix :: [[integer]]) :: [integer]\n  def spiral_order(matrix) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "55",
                    "title": "Jump Game",
                    "titleSlug": "jump-game",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool canJump(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function canJump(nums: number[]): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool canJump(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func canJump(nums []int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "56",
                    "title": "Merge Intervals",
                    "titleSlug": "merge-intervals",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def merge(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[][] Merge(int[][] intervals) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function merge(intervals: number[][]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer[][]\n     */\n    function merge($intervals) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func merge(_ intervals: [[Int]]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun merge(intervals: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> merge(List<List<int>> intervals) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func merge(intervals [][]int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} intervals\n# @return {Integer[][]}\ndef merge(intervals)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (merge intervals)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec merge(Intervals :: [[integer()]]) -> [[integer()]].\nmerge(Intervals) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\n  def merge(intervals) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "57",
                    "title": "Insert Interval",
                    "titleSlug": "insert-interval",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[][] Insert(int[][] intervals, int[] newInterval) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} intervals\n * @param {number[]} newInterval\n * @return {number[][]}\n */\nvar insert = function(intervals, newInterval) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function insert(intervals: number[][], newInterval: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $newInterval\n     * @return Integer[][]\n     */\n    function insert($intervals, $newInterval) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func insert(_ intervals: [[Int]], _ newInterval: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun insert(intervals: Array<IntArray>, newInterval: IntArray): Array<IntArray> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> insert(List<List<int>> intervals, List<int> newInterval) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func insert(intervals [][]int, newInterval []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} intervals\n# @param {Integer[]} new_interval\n# @return {Integer[][]}\ndef insert(intervals, new_interval)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def insert(intervals: Array[Array[Int]], newInterval: Array[Int]): Array[Array[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn insert(intervals: Vec<Vec<i32>>, new_interval: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (insert intervals newInterval)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec insert(Intervals :: [[integer()]], NewInterval :: [integer()]) -> [[integer()]].\ninsert(Intervals, NewInterval) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec insert(intervals :: [[integer]], new_interval :: [integer]) :: [[integer]]\n  def insert(intervals, new_interval) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "58",
                    "title": "Length of Last Word",
                    "titleSlug": "length-of-last-word",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int lengthOfLastWord(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int lengthOfLastWord(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LengthOfLastWord(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLastWord = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function lengthOfLastWord(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLastWord($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func lengthOfLastWord(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun lengthOfLastWord(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int lengthOfLastWord(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func lengthOfLastWord(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef length_of_last_word(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def lengthOfLastWord(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn length_of_last_word(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (length-of-last-word s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec length_of_last_word(S :: unicode:unicode_binary()) -> integer().\nlength_of_last_word(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec length_of_last_word(s :: String.t) :: integer\n  def length_of_last_word(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "59",
                    "title": "Spiral Matrix II",
                    "titleSlug": "spiral-matrix-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[][] generateMatrix(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generateMatrix(int n, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[][] GenerateMatrix(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number[][]}\n */\nvar generateMatrix = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function generateMatrix(n: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function generateMatrix($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func generateMatrix(_ n: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun generateMatrix(n: Int): Array<IntArray> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> generateMatrix(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func generateMatrix(n int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer[][]}\ndef generate_matrix(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def generateMatrix(n: Int): Array[Array[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn generate_matrix(n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (generate-matrix n)\n  (-> exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec generate_matrix(N :: integer()) -> [[integer()]].\ngenerate_matrix(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec generate_matrix(n :: integer) :: [[integer]]\n  def generate_matrix(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "60",
                    "title": "Permutation Sequence",
                    "titleSlug": "permutation-sequence",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string getPermutation(int n, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String getPermutation(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* getPermutation(int n, int k) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string GetPermutation(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getPermutation = function(n, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function getPermutation(n: number, k: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function getPermutation($n, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func getPermutation(_ n: Int, _ k: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun getPermutation(n: Int, k: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String getPermutation(int n, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func getPermutation(n int, k int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef get_permutation(n, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def getPermutation(n: Int, k: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn get_permutation(n: i32, k: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (get-permutation n k)\n  (-> exact-integer? exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec get_permutation(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nget_permutation(N, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec get_permutation(n :: integer, k :: integer) :: String.t\n  def get_permutation(n, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "61",
                    "title": "Rotate List",
                    "titleSlug": "rotate-list",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type k: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* rotateRight(struct ListNode* head, int k) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RotateRight(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction rotateRight(head: ListNode | null, k: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function rotateRight($head, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func rotateRight(_ head: ListNode?, _ k: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun rotateRight(head: ListNode?, k: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? rotateRight(ListNode? head, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc rotateRight(head *ListNode, k int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef rotate_right(head, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def rotateRight(head: ListNode, k: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn rotate_right(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (rotate-right head k)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec rotate_right(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\nrotate_right(Head, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec rotate_right(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\n  def rotate_right(head, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "62",
                    "title": "Unique Paths",
                    "titleSlug": "unique-paths",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int uniquePaths(int m, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int uniquePaths(int m, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int UniquePaths(int m, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function uniquePaths(m: number, n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function uniquePaths($m, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int uniquePaths(int m, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func uniquePaths(m int, n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef unique_paths(m, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn unique_paths(m: i32, n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (unique-paths m n)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec unique_paths(M :: integer(), N :: integer()) -> integer().\nunique_paths(M, N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec unique_paths(m :: integer, n :: integer) :: integer\n  def unique_paths(m, n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "63",
                    "title": "Unique Paths II",
                    "titleSlug": "unique-paths-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridSize, int* obstacleGridColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int UniquePathsWithObstacles(int[][] obstacleGrid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function uniquePathsWithObstacles(obstacleGrid: number[][]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $obstacleGrid\n     * @return Integer\n     */\n    function uniquePathsWithObstacles($obstacleGrid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func uniquePathsWithObstacles(_ obstacleGrid: [[Int]]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int uniquePathsWithObstacles(List<List<int>> obstacleGrid) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func uniquePathsWithObstacles(obstacleGrid [][]int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} obstacle_grid\n# @return {Integer}\ndef unique_paths_with_obstacles(obstacle_grid)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def uniquePathsWithObstacles(obstacleGrid: Array[Array[Int]]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn unique_paths_with_obstacles(obstacle_grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (unique-paths-with-obstacles obstacleGrid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec unique_paths_with_obstacles(ObstacleGrid :: [[integer()]]) -> integer().\nunique_paths_with_obstacles(ObstacleGrid) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec unique_paths_with_obstacles(obstacle_grid :: [[integer]]) :: integer\n  def unique_paths_with_obstacles(obstacle_grid) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "64",
                    "title": "Minimum Path Sum",
                    "titleSlug": "minimum-path-sum",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int minPathSum(int[][] grid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int minPathSum(int** grid, int gridSize, int* gridColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MinPathSum(int[][] grid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minPathSum = function(grid) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function minPathSum(grid: number[][]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minPathSum($grid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun minPathSum(grid: Array<IntArray>): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int minPathSum(List<List<int>> grid) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func minPathSum(grid [][]int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_path_sum(grid)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def minPathSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn min_path_sum(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (min-path-sum grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec min_path_sum(Grid :: [[integer()]]) -> integer().\nmin_path_sum(Grid) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec min_path_sum(grid :: [[integer]]) :: integer\n  def min_path_sum(grid) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "65",
                    "title": "Valid Number",
                    "titleSlug": "valid-number",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isNumber(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isNumber(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isNumber(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsNumber(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isNumber(s: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isNumber($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isNumber(_ s: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isNumber(s: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isNumber(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isNumber(s string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Boolean}\ndef is_number(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isNumber(s: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_number(s: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-number s)\n  (-> string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_number(S :: unicode:unicode_binary()) -> boolean().\nis_number(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_number(s :: String.t) :: boolean\n  def is_number(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "66",
                    "title": "Plus One",
                    "titleSlug": "plus-one",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[] PlusOne(int[] digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne = function(digits) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function plusOne(digits: number[]): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer[]\n     */\n    function plusOne($digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func plusOne(_ digits: [Int]) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun plusOne(digits: IntArray): IntArray {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> plusOne(List<int> digits) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func plusOne(digits []int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} digits\n# @return {Integer[]}\ndef plus_one(digits)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def plusOne(digits: Array[Int]): Array[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (plus-one digits)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec plus_one(Digits :: [integer()]) -> [integer()].\nplus_one(Digits) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec plus_one(digits :: [integer]) :: [integer]\n  def plus_one(digits) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "67",
                    "title": "Add Binary",
                    "titleSlug": "add-binary",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* addBinary(char* a, char* b) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function addBinary(a: string, b: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func addBinary(a string, b string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (add-binary a b)\n  (-> string? string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "68",
                    "title": "Text Justification",
                    "titleSlug": "text-justification",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** fullJustify(char** words, int wordsSize, int maxWidth, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> FullJustify(string[] words, int maxWidth) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function fullJustify(words: string[], maxWidth: number): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $maxWidth\n     * @return String[]\n     */\n    function fullJustify($words, $maxWidth) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func fullJustify(_ words: [String], _ maxWidth: Int) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun fullJustify(words: Array<String>, maxWidth: Int): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> fullJustify(List<String> words, int maxWidth) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func fullJustify(words []string, maxWidth int) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn full_justify(words: Vec<String>, max_width: i32) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (full-justify words maxWidth)\n  (-> (listof string?) exact-integer? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec full_justify(Words :: [unicode:unicode_binary()], MaxWidth :: integer()) -> [unicode:unicode_binary()].\nfull_justify(Words, MaxWidth) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec full_justify(words :: [String.t], max_width :: integer) :: [String.t]\n  def full_justify(words, max_width) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "69",
                    "title": "Sqrt(x)",
                    "titleSlug": "sqrtx",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int mySqrt(int x) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MySqrt(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function mySqrt(x: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func mySqrt(_ x: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun mySqrt(x: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int mySqrt(int x) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func mySqrt(x int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "70",
                    "title": "Climbing Stairs",
                    "titleSlug": "climbing-stairs",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int climbStairs(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function climbStairs(n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int climbStairs(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func climbStairs(n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "71",
                    "title": "Simplify Path",
                    "titleSlug": "simplify-path",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string simplifyPath(string path) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* simplifyPath(char* path) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string SimplifyPath(string path) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function simplifyPath(path: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function simplifyPath($path) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func simplifyPath(_ path: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun simplifyPath(path: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String simplifyPath(String path) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func simplifyPath(path string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} path\n# @return {String}\ndef simplify_path(path)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn simplify_path(path: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (simplify-path path)\n  (-> string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec simplify_path(Path :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsimplify_path(Path) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec simplify_path(path :: String.t) :: String.t\n  def simplify_path(path) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "72",
                    "title": "Edit Distance",
                    "titleSlug": "edit-distance",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int minDistance(String word1, String word2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int minDistance(char* word1, char* word2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MinDistance(string word1, string word2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function minDistance(word1: string, word2: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function minDistance($word1, $word2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun minDistance(word1: String, word2: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int minDistance(String word1, String word2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func minDistance(word1 string, word2 string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef min_distance(word1, word2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn min_distance(word1: String, word2: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (min-distance word1 word2)\n  (-> string? string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec min_distance(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nmin_distance(Word1, Word2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec min_distance(word1 :: String.t, word2 :: String.t) :: integer\n  def min_distance(word1, word2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "73",
                    "title": "Set Matrix Zeroes",
                    "titleSlug": "set-matrix-zeroes",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void setZeroes(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void SetZeroes(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction setZeroes(matrix: number[][]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function setZeroes(&$matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func setZeroes(_ matrix: inout [[Int]]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun setZeroes(matrix: Array<IntArray>): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void setZeroes(List<List<int>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func setZeroes(matrix [][]int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef set_zeroes(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn set_zeroes(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "74",
                    "title": "Search a 2D Matrix",
                    "titleSlug": "search-a-2d-matrix",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $target\n     * @return Boolean\n     */\n    function searchMatrix($matrix, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool searchMatrix(List<List<int>> matrix, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func searchMatrix(matrix [][]int, target int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search-matrix matrix target)\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search_matrix(Matrix :: [[integer()]], Target :: integer()) -> boolean().\nsearch_matrix(Matrix, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search_matrix(matrix :: [[integer]], target :: integer) :: boolean\n  def search_matrix(matrix, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "75",
                    "title": "Sort Colors",
                    "titleSlug": "sort-colors",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void sortColors(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void sortColors(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void SortColors(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar sortColors = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction sortColors(nums: number[]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function sortColors(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func sortColors(_ nums: inout [Int]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun sortColors(nums: IntArray): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void sortColors(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func sortColors(nums []int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef sort_colors(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def sortColors(nums: Array[Int]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn sort_colors(nums: &mut Vec<i32>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "76",
                    "title": "Minimum Window Substring",
                    "titleSlug": "minimum-window-substring",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* minWindow(char* s, char* t) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function minWindow(s: string, t: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String minWindow(String s, String t) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func minWindow(s string, t string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (min-window s t)\n  (-> string? string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S, T) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "77",
                    "title": "Combinations",
                    "titleSlug": "combinations",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> combine(int n, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combine(int n, int k, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> Combine(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function(n, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function combine(n: number, k: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function combine($n, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func combine(_ n: Int, _ k: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun combine(n: Int, k: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> combine(int n, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func combine(n int, k int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[][]}\ndef combine(n, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def combine(n: Int, k: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn combine(n: i32, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (combine n k)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec combine(N :: integer(), K :: integer()) -> [[integer()]].\ncombine(N, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec combine(n :: integer, k :: integer) :: [[integer]]\n  def combine(n, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "78",
                    "title": "Subsets",
                    "titleSlug": "subsets",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> Subsets(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function subsets(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsets($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func subsets(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun subsets(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> subsets(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func subsets(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def subsets(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (subsets nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec subsets(Nums :: [integer()]) -> [[integer()]].\nsubsets(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec subsets(nums :: [integer]) :: [[integer]]\n  def subsets(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "79",
                    "title": "Word Search",
                    "titleSlug": "word-search",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool exist(char** board, int boardSize, int* boardColSize, char* word) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool Exist(char[][] board, string word) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function exist(board: string[][], word: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String $word\n     * @return Boolean\n     */\n    function exist($board, $word) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func exist(_ board: [[Character]], _ word: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun exist(board: Array<CharArray>, word: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool exist(List<List<String>> board, String word) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func exist(board [][]byte, word string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} board\n# @param {String} word\n# @return {Boolean}\ndef exist(board, word)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def exist(board: Array[Array[Char]], word: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (exist board word)\n  (-> (listof (listof char?)) string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec exist(Board :: [[char()]], Word :: unicode:unicode_binary()) -> boolean().\nexist(Board, Word) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec exist(board :: [[char]], word :: String.t) :: boolean\n  def exist(board, word) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "80",
                    "title": "Remove Duplicates from Sorted Array II",
                    "titleSlug": "remove-duplicates-from-sorted-array-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int removeDuplicates(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function removeDuplicates(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func removeDuplicates(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "81",
                    "title": "Search in Rotated Sorted Array II",
                    "titleSlug": "search-in-rotated-sorted-array-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool search(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool search(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool Search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {boolean}\n */\nvar search = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function search(nums: number[], target: number): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Boolean\n     */\n    function search($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool search(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func search(nums []int, target int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Boolean}\ndef search(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search(Nums :: [integer()], Target :: integer()) -> boolean().\nsearch(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: boolean\n  def search(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "82",
                    "title": "Remove Duplicates from Sorted List II",
                    "titleSlug": "remove-duplicates-from-sorted-list-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode DeleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function deleteDuplicates($head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun deleteDuplicates(head: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? deleteDuplicates(ListNode? head) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef delete_duplicates(head)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (delete-duplicates head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec delete_duplicates(Head :: #list_node{} | null) -> #list_node{} | null.\ndelete_duplicates(Head) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\n  def delete_duplicates(head) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "83",
                    "title": "Remove Duplicates from Sorted List",
                    "titleSlug": "remove-duplicates-from-sorted-list",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode DeleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function deleteDuplicates($head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun deleteDuplicates(head: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? deleteDuplicates(ListNode? head) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef delete_duplicates(head)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (delete-duplicates head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec delete_duplicates(Head :: #list_node{} | null) -> #list_node{} | null.\ndelete_duplicates(Head) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\n  def delete_duplicates(head) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "84",
                    "title": "Largest Rectangle in Histogram",
                    "titleSlug": "largest-rectangle-in-histogram",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int largestRectangleArea(int* heights, int heightsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function largestRectangleArea(heights: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int largestRectangleArea(List<int> heights) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func largestRectangleArea(heights []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (largest-rectangle-area heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\nlargest_rectangle_area(Heights) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\n  def largest_rectangle_area(heights) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "85",
                    "title": "Maximal Rectangle",
                    "titleSlug": "maximal-rectangle",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int maximalRectangle(char** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MaximalRectangle(char[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalRectangle = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function maximalRectangle(matrix: string[][]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalRectangle($matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func maximalRectangle(_ matrix: [[Character]]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun maximalRectangle(matrix: Array<CharArray>): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int maximalRectangle(List<List<String>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func maximalRectangle(matrix [][]byte) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_rectangle(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def maximalRectangle(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn maximal_rectangle(matrix: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (maximal-rectangle matrix)\n  (-> (listof (listof char?)) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec maximal_rectangle(Matrix :: [[char()]]) -> integer().\nmaximal_rectangle(Matrix) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec maximal_rectangle(matrix :: [[char]]) :: integer\n  def maximal_rectangle(matrix) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "86",
                    "title": "Partition List",
                    "titleSlug": "partition-list",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type x: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* partition(struct ListNode* head, int x) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode Partition(ListNode head, int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */\nvar partition = function(head, x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction partition(head: ListNode | null, x: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $x\n     * @return ListNode\n     */\n    function partition($head, $x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func partition(_ head: ListNode?, _ x: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun partition(head: ListNode?, x: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? partition(ListNode? head, int x) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc partition(head *ListNode, x int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} x\n# @return {ListNode}\ndef partition(head, x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def partition(head: ListNode, x: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn partition(head: Option<Box<ListNode>>, x: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (partition head x)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec partition(Head :: #list_node{} | null, X :: integer()) -> #list_node{} | null.\npartition(Head, X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec partition(head :: ListNode.t | nil, x :: integer) :: ListNode.t | nil\n  def partition(head, x) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "87",
                    "title": "Scramble String",
                    "titleSlug": "scramble-string",
                    "difficulty": "Hard",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isScramble(string s1, string s2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isScramble(String s1, String s2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isScramble(char* s1, char* s2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsScramble(string s1, string s2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar isScramble = function(s1, s2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isScramble(s1: string, s2: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function isScramble($s1, $s2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isScramble(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isScramble(s1: String, s2: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isScramble(String s1, String s2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isScramble(s1 string, s2 string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef is_scramble(s1, s2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isScramble(s1: String, s2: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_scramble(s1: String, s2: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-scramble s1 s2)\n  (-> string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_scramble(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\nis_scramble(S1, S2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_scramble(s1 :: String.t, s2 :: String.t) :: boolean\n  def is_scramble(s1, s2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "88",
                    "title": "Merge Sorted Array",
                    "titleSlug": "merge-sorted-array",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer $m\n     * @param Integer[] $nums2\n     * @param Integer $n\n     * @return NULL\n     */\n    function merge(&$nums1, $m, $nums2, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void merge(List<int> nums1, int m, List<int> nums2, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums1\n# @param {Integer} m\n# @param {Integer[]} nums2\n# @param {Integer} n\n# @return {Void} Do not return anything, modify nums1 in-place instead.\ndef merge(nums1, m, nums2, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "89",
                    "title": "Gray Code",
                    "titleSlug": "gray-code",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> grayCode(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<Integer> grayCode(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* grayCode(int n, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<int> GrayCode(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar grayCode = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function grayCode(n: number): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function grayCode($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func grayCode(_ n: Int) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun grayCode(n: Int): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> grayCode(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func grayCode(n int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer[]}\ndef gray_code(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def grayCode(n: Int): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn gray_code(n: i32) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (gray-code n)\n  (-> exact-integer? (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec gray_code(N :: integer()) -> [integer()].\ngray_code(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec gray_code(n :: integer) :: [integer]\n  def gray_code(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "90",
                    "title": "Subsets II",
                    "titleSlug": "subsets-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsetsWithDup(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> SubsetsWithDup(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsetsWithDup = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function subsetsWithDup(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsetsWithDup($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func subsetsWithDup(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun subsetsWithDup(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> subsetsWithDup(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func subsetsWithDup(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets_with_dup(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def subsetsWithDup(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn subsets_with_dup(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (subsets-with-dup nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec subsets_with_dup(Nums :: [integer()]) -> [[integer()]].\nsubsets_with_dup(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec subsets_with_dup(nums :: [integer]) :: [[integer]]\n  def subsets_with_dup(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "91",
                    "title": "Decode Ways",
                    "titleSlug": "decode-ways",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int numDecodings(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int numDecodings(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int numDecodings(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int NumDecodings(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function numDecodings(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numDecodings($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func numDecodings(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun numDecodings(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int numDecodings(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func numDecodings(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef num_decodings(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def numDecodings(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn num_decodings(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (num-decodings s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\nnum_decodings(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec num_decodings(s :: String.t) :: integer\n  def num_decodings(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "92",
                    "title": "Reverse Linked List II",
                    "titleSlug": "reverse-linked-list-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type left: int\n        :type right: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseBetween(struct ListNode* head, int left, int right) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseBetween(ListNode head, int left, int right) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} left\n * @param {number} right\n * @return {ListNode}\n */\nvar reverseBetween = function(head, left, right) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseBetween(head: ListNode | null, left: number, right: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $left\n     * @param Integer $right\n     * @return ListNode\n     */\n    function reverseBetween($head, $left, $right) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseBetween(_ head: ListNode?, _ left: Int, _ right: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseBetween(head: ListNode?, left: Int, right: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? reverseBetween(ListNode? head, int left, int right) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseBetween(head *ListNode, left int, right int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} left\n# @param {Integer} right\n# @return {ListNode}\ndef reverse_between(head, left, right)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseBetween(head: ListNode, left: Int, right: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_between(head: Option<Box<ListNode>>, left: i32, right: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (reverse-between head left right)\n  (-> (or/c list-node? #f) exact-integer? exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec reverse_between(Head :: #list_node{} | null, Left :: integer(), Right :: integer()) -> #list_node{} | null.\nreverse_between(Head, Left, Right) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec reverse_between(head :: ListNode.t | nil, left :: integer, right :: integer) :: ListNode.t | nil\n  def reverse_between(head, left, right) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "93",
                    "title": "Restore IP Addresses",
                    "titleSlug": "restore-ip-addresses",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> restoreIpAddresses(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> restoreIpAddresses(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def restoreIpAddresses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** restoreIpAddresses(char* s, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> RestoreIpAddresses(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar restoreIpAddresses = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function restoreIpAddresses(s: string): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function restoreIpAddresses($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func restoreIpAddresses(_ s: String) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun restoreIpAddresses(s: String): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> restoreIpAddresses(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func restoreIpAddresses(s string) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {String[]}\ndef restore_ip_addresses(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def restoreIpAddresses(s: String): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn restore_ip_addresses(s: String) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (restore-ip-addresses s)\n  (-> string? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec restore_ip_addresses(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nrestore_ip_addresses(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec restore_ip_addresses(s :: String.t) :: [String.t]\n  def restore_ip_addresses(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "94",
                    "title": "Binary Tree Inorder Traversal",
                    "titleSlug": "binary-tree-inorder-traversal",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> inorderTraversal(TreeNode? root) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (inorder-traversal root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\ninorder_traversal(Root) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\n  def inorder_traversal(root) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "95",
                    "title": "Unique Binary Search Trees II",
                    "titleSlug": "unique-binary-search-trees-ii",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[Optional[TreeNode]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** generateTrees(int n, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> GenerateTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction generateTrees(n: number): Array<TreeNode | null> {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @return TreeNode[]\n     */\n    function generateTrees($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun generateTrees(n: Int): List<TreeNode?> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<TreeNode?> generateTrees(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc generateTrees(n int) []*TreeNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer} n\n# @return {TreeNode[]}\ndef generate_trees(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (generate-trees n)\n  (-> exact-integer? (listof (or/c tree-node? #f)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec generate_trees(N :: integer()) -> [#tree_node{} | null].\ngenerate_trees(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec generate_trees(n :: integer) :: [TreeNode.t | nil]\n  def generate_trees(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "96",
                    "title": "Unique Binary Search Trees",
                    "titleSlug": "unique-binary-search-trees",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int numTrees(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int numTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def numTrees(self, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int numTrees(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int NumTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function numTrees(n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun numTrees(n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int numTrees(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func numTrees(n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def numTrees(n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (num-trees n)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec num_trees(N :: integer()) -> integer().\nnum_trees(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec num_trees(n :: integer) :: integer\n  def num_trees(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "97",
                    "title": "Interleaving String",
                    "titleSlug": "interleaving-string",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isInterleave(string s1, string s2, string s3) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isInterleave(char* s1, char* s2, char* s3) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsInterleave(string s1, string s2, string s3) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */\nvar isInterleave = function(s1, s2, s3) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isInterleave(s1: string, s2: string, s3: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param String $s3\n     * @return Boolean\n     */\n    function isInterleave($s1, $s2, $s3) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isInterleave(_ s1: String, _ s2: String, _ s3: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isInterleave(s1: String, s2: String, s3: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isInterleave(String s1, String s2, String s3) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isInterleave(s1 string, s2 string, s3 string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s1\n# @param {String} s2\n# @param {String} s3\n# @return {Boolean}\ndef is_interleave(s1, s2, s3)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isInterleave(s1: String, s2: String, s3: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-interleave s1 s2 s3)\n  (-> string? string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_interleave(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), S3 :: unicode:unicode_binary()) -> boolean().\nis_interleave(S1, S2, S3) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_interleave(s1 :: String.t, s2 :: String.t, s3 :: String.t) :: boolean\n  def is_interleave(s1, s2, s3) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "98",
                    "title": "Validate Binary Search Tree",
                    "titleSlug": "validate-binary-search-tree",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isValidBST(struct TreeNode* root) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsValidBST(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isValidBST(root: TreeNode | null): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isValidBST($root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isValidBST(root: TreeNode?): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isValidBST(TreeNode? root) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_valid_bst(root)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isValidBST(root: TreeNode): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-valid-bst root)\n  (-> (or/c tree-node? #f) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_valid_bst(Root :: #tree_node{} | null) -> boolean().\nis_valid_bst(Root) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_valid_bst(root :: TreeNode.t | nil) :: boolean\n  def is_valid_bst(root) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "99",
                    "title": "Recover Binary Search Tree",
                    "titleSlug": "recover-binary-search-tree",
                    "difficulty": "Medium",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void recoverTree(TreeNode* root) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nvoid recoverTree(struct TreeNode* root) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public void RecoverTree(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar recoverTree = function(root) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/**\n Do not return anything, modify root in-place instead.\n */\nfunction recoverTree(root: TreeNode | null): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return NULL\n     */\n    function recoverTree($root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func recoverTree(_ root: TreeNode?) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun recoverTree(root: TreeNode?): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  void recoverTree(TreeNode? root) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc recoverTree(root *TreeNode)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Void} Do not return anything, modify root in-place instead.\ndef recover_tree(root)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def recoverTree(root: TreeNode): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn recover_tree(root: &mut Option<Rc<RefCell<TreeNode>>>) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (recover-tree root)\n  (-> (or/c tree-node? #f) void?)\n  )"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "100",
                    "title": "Same Tree",
                    "titleSlug": "same-tree",
                    "difficulty": "Easy",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: Optional[TreeNode]\n        :type q: Optional[TreeNode]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSameTree(struct TreeNode* p, struct TreeNode* q) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return Boolean\n     */\n    function isSameTree($p, $q) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSameTree(TreeNode? p, TreeNode? q) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {Boolean}\ndef is_same_tree(p, q)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_same_tree(p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-same-tree p q)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_same_tree(P :: #tree_node{} | null, Q :: #tree_node{} | null) -> boolean().\nis_same_tree(P, Q) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_same_tree(p :: TreeNode.t | nil, q :: TreeNode.t | nil) :: boolean\n  def is_same_tree(p, q) do\n    \n  end\nend"
                        }
                    ]
                }
            ]
        }
    }
}