{
    "data": {
        "problemsetQuestionList": {
            "total": 3530,
            "questions": [
                {
                    "frontendQuestionId": "1",
                    "title": "Two Sum",
                    "titleSlug": "two-sum",
                    "difficulty": "Easy",
                    "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\">&nbsp;</font>time complexity?",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function twoSum(nums: number[], target: number): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func twoSum(nums []int, target int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "2",
                    "title": "Add Two Numbers",
                    "titleSlug": "add-two-numbers",
                    "difficulty": "Medium",
                    "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,0,8]\n<strong>Explanation:</strong> 342 + 465 = 807.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>Output:</strong> [8,9,9,9,0,0,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: Optional[ListNode]\n        :type l2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? addTwoNumbers(ListNode? l1, ListNode? l2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (add-two-numbers l1 l2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\nadd_two_numbers(L1, L2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\n  def add_two_numbers(l1, l2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "3",
                    "title": "Longest Substring Without Repeating Characters",
                    "titleSlug": "longest-substring-without-repeating-characters",
                    "difficulty": "Medium",
                    "content": "<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword=\"substring-nonempty\"><strong>substring</strong></span> without duplicate characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int lengthOfLongestSubstring(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function lengthOfLongestSubstring(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func lengthOfLongestSubstring(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "4",
                    "title": "Median of Two Sorted Arrays",
                    "titleSlug": "median-of-two-sorted-arrays",
                    "difficulty": "Hard",
                    "content": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  double findMedianSortedArrays(List<int> nums1, List<int> nums2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (find-median-sorted-arrays nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\nfind_median_sorted_arrays(Nums1, Nums2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\n  def find_median_sorted_arrays(nums1, nums2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "5",
                    "title": "Longest Palindromic Substring",
                    "titleSlug": "longest-palindromic-substring",
                    "difficulty": "Medium",
                    "content": "<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword=\"palindromic-string\"><em>palindromic</em></span> <span data-keyword=\"substring-nonempty\"><em>substring</em></span> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* longestPalindrome(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function longestPalindrome(s: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String longestPalindrome(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func longestPalindrome(s string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (longest-palindrome s)\n  (-> string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "6",
                    "title": "Zigzag Conversion",
                    "titleSlug": "zigzag-conversion",
                    "difficulty": "Medium",
                    "content": "<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n\n<pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n\n<pre>\nstring convert(string s, int numRows);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 4\n<strong>Output:</strong> &quot;PINALSIGYAHRPI&quot;\n<strong>Explanation:</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A&quot;, numRows = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), <code>&#39;,&#39;</code> and <code>&#39;.&#39;</code>.</li>\n\t<li><code>1 &lt;= numRows &lt;= 1000</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string convert(string s, int numRows) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String convert(String s, int numRows) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* convert(char* s, int numRows) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string Convert(string s, int numRows) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function convert(s: string, numRows: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $numRows\n     * @return String\n     */\n    function convert($s, $numRows) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func convert(_ s: String, _ numRows: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun convert(s: String, numRows: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String convert(String s, int numRows) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func convert(s string, numRows int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {Integer} num_rows\n# @return {String}\ndef convert(s, num_rows)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def convert(s: String, numRows: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn convert(s: String, num_rows: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (convert s numRows)\n  (-> string? exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec convert(S :: unicode:unicode_binary(), NumRows :: integer()) -> unicode:unicode_binary().\nconvert(S, NumRows) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec convert(s :: String.t, num_rows :: integer) :: String.t\n  def convert(s, num_rows) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "7",
                    "title": "Reverse Integer",
                    "titleSlug": "reverse-integer",
                    "difficulty": "Medium",
                    "content": "<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int reverse(int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int reverse(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def reverse(self, x: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int reverse(int x){\n\n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Reverse(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function reverse(x: number): number {\n\n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func reverse(_ x: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun reverse(x: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int reverse(int x) {\n\n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func reverse(x int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "8",
                    "title": "String to Integer (atoi)",
                    "titleSlug": "string-to-integer-atoi",
                    "difficulty": "Medium",
                    "content": "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer.</p>\n\n<p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p>\n\n<ol>\n\t<li><strong>Whitespace</strong>: Ignore any leading whitespace (<code>&quot; &quot;</code>).</li>\n\t<li><strong>Signedness</strong>: Determine the sign by checking if the next character is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>, assuming positivity if neither present.</li>\n\t<li><strong>Conversion</strong>: Read the integer by skipping leading zeros&nbsp;until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.</li>\n\t<li><strong>Rounding</strong>: If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then round the integer to remain in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be rounded to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be rounded to <code>2<sup>31</sup> - 1</code>.</li>\n</ol>\n\n<p>Return the integer as the final result.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;42&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">42</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nThe underlined characters are what is read in and the caret is the current reader position.\nStep 1: &quot;42&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;42&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>42</u>&quot; (&quot;42&quot; is read in)\n           ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot; -042&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-42</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nStep 1: &quot;<u>   </u>-042&quot; (leading whitespace is read and ignored)\n            ^\nStep 2: &quot;   <u>-</u>042&quot; (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3: &quot;   -<u>042</u>&quot; (&quot;042&quot; is read in, leading zeros ignored in the result)\n               ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;1337c0d3&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1337</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nStep 1: &quot;1337c0d3&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;1337c0d3&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>1337</u>c0d3&quot; (&quot;1337&quot; is read in; reading stops because the next character is a non-digit)\n             ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0-1&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\nStep 1: &quot;0-1&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;0-1&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>0</u>-1&quot; (&quot;0&quot; is read in; reading stops because the next character is a non-digit)\n          ^\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 5:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;words and 987&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Reading stops at the first non-digit character &#39;w&#39;.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;.&#39;</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int myAtoi(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int myAtoi(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def myAtoi(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int myAtoi(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MyAtoi(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar myAtoi = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function myAtoi(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function myAtoi($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func myAtoi(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun myAtoi(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int myAtoi(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func myAtoi(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef my_atoi(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def myAtoi(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn my_atoi(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (my-atoi s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec my_atoi(S :: unicode:unicode_binary()) -> integer().\nmy_atoi(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec my_atoi(s :: String.t) :: integer\n  def my_atoi(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "9",
                    "title": "Palindrome Number",
                    "titleSlug": "palindrome-number",
                    "difficulty": "Easy",
                    "content": "<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword=\"palindrome-integer\"><em><strong>palindrome</strong></em></span><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isPalindrome(int x) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsPalindrome(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isPalindrome(x: number): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isPalindrome(x: Int): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isPalindrome(int x) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isPalindrome(x int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "10",
                    "title": "Regular Expression Matching",
                    "titleSlug": "regular-expression-matching",
                    "difficulty": "Hard",
                    "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.​​​​</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isMatch(char* s, char* p) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isMatch(s: string, p: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isMatch(String s, String p) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isMatch(s string, p string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "11",
                    "title": "Container With Most Water",
                    "titleSlug": "container-with-most-water",
                    "difficulty": "Medium",
                    "content": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>\n\n<p>Return <em>the maximum amount of water a container can store</em>.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int maxArea(int* height, int heightSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function maxArea(height: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int maxArea(List<int> height) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func maxArea(height []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "12",
                    "title": "Integer to Roman",
                    "titleSlug": "integer-to-roman",
                    "difficulty": "Medium",
                    "content": "<p>Seven different symbols represent Roman numerals with the following values:</p>\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Symbol</th>\n\t\t\t<th>Value</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>I</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>V</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>X</td>\n\t\t\t<td>10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>L</td>\n\t\t\t<td>50</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>C</td>\n\t\t\t<td>100</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>D</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>M</td>\n\t\t\t<td>1000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Roman numerals are formed by appending&nbsp;the conversions of&nbsp;decimal place values&nbsp;from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:</p>\n\n<ul>\n\t<li>If the value does not start with 4 or&nbsp;9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.</li>\n\t<li>If the value starts with 4 or 9 use the&nbsp;<strong>subtractive form</strong>&nbsp;representing&nbsp;one symbol subtracted from the following symbol, for example,&nbsp;4 is 1 (<code>I</code>) less than 5 (<code>V</code>): <code>IV</code>&nbsp;and 9 is 1 (<code>I</code>) less than 10 (<code>X</code>): <code>IX</code>.&nbsp;Only the following subtractive forms are used: 4 (<code>IV</code>), 9 (<code>IX</code>),&nbsp;40 (<code>XL</code>), 90 (<code>XC</code>), 400 (<code>CD</code>) and 900 (<code>CM</code>).</li>\n\t<li>Only powers of 10 (<code>I</code>, <code>X</code>, <code>C</code>, <code>M</code>) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5&nbsp;(<code>V</code>), 50 (<code>L</code>), or 500 (<code>D</code>) multiple times. If you need to append a symbol&nbsp;4 times&nbsp;use the <strong>subtractive form</strong>.</li>\n</ul>\n\n<p>Given an integer, convert it to a Roman numeral.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num = 3749</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;MMMDCCXLIX&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\n3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num = 58</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;LVIII&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\n50 = L\n 8 = VIII\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">num = 1994</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;MCMXCIV&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n</pre>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string intToRoman(int num) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* intToRoman(int num) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string IntToRoman(int num) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function intToRoman(num: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func intToRoman(_ num: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun intToRoman(num: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String intToRoman(int num) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func intToRoman(num int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (int-to-roman num)\n  (-> exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\nint_to_roman(Num) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "13",
                    "title": "Roman to Integer",
                    "titleSlug": "roman-to-integer",
                    "difficulty": "Easy",
                    "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two ones added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int romanToInt(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RomanToInt(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function romanToInt(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun romanToInt(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int romanToInt(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func romanToInt(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (roman-to-int s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\nroman_to_int(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec roman_to_int(s :: String.t) :: integer\n  def roman_to_int(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "14",
                    "title": "Longest Common Prefix",
                    "titleSlug": "longest-common-prefix",
                    "difficulty": "Easy",
                    "content": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>Output:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lowercase English letters if it is non-empty.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* longestCommonPrefix(char** strs, int strsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function longestCommonPrefix(strs: string[]): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String longestCommonPrefix(List<String> strs) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func longestCommonPrefix(strs []string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (longest-common-prefix strs)\n  (-> (listof string?) string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nlongest_common_prefix(Strs) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\n  def longest_common_prefix(strs) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "15",
                    "title": "3Sum",
                    "titleSlug": "3sum",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function threeSum(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func threeSum(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "16",
                    "title": "3Sum Closest",
                    "titleSlug": "3sum-closest",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p>\n\n<p>Return <em>the sum of the three integers</em>.</p>\n\n<p>You may assume that each input would have exactly one solution.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,2,1,-4], target = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0], target = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 500</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int threeSumClosest(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int ThreeSumClosest(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function threeSumClosest(nums: number[], target: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumClosest($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func threeSumClosest(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun threeSumClosest(nums: IntArray, target: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int threeSumClosest(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func threeSumClosest(nums []int, target int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_closest(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def threeSumClosest(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn three_sum_closest(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (three-sum-closest nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec three_sum_closest(Nums :: [integer()], Target :: integer()) -> integer().\nthree_sum_closest(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec three_sum_closest(nums :: [integer], target :: integer) :: integer\n  def three_sum_closest(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "17",
                    "title": "Letter Combinations of a Phone Number",
                    "titleSlug": "letter-combinations-of-a-phone-number",
                    "difficulty": "Medium",
                    "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** letterCombinations(char* digits, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function letterCombinations(digits: string): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun letterCombinations(digits: String): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> letterCombinations(String digits) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func letterCombinations(digits string) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (letter-combinations digits)\n  (-> string? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_combinations(Digits) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec letter_combinations(digits :: String.t) :: [String.t]\n  def letter_combinations(digits) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "18",
                    "title": "4Sum",
                    "titleSlug": "4sum",
                    "difficulty": "Medium",
                    "content": "<p>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= a, b, c, d&nbsp;&lt; n</code></li>\n\t<li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.</li>\n\t<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,-1,0,-2,2], target = 0\n<strong>Output:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2], target = 8\n<strong>Output:</strong> [[2,2,2,2]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> FourSum(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function fourSum(nums: number[], target: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function fourSum($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func fourSum(_ nums: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun fourSum(nums: IntArray, target: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> fourSum(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func fourSum(nums []int, target int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[][]}\ndef four_sum(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def fourSum(nums: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn four_sum(nums: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (four-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec four_sum(Nums :: [integer()], Target :: integer()) -> [[integer()]].\nfour_sum(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec four_sum(nums :: [integer], target :: integer) :: [[integer]]\n  def four_sum(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "19",
                    "title": "Remove Nth Node From End of List",
                    "titleSlug": "remove-nth-node-from-end-of-list",
                    "difficulty": "Medium",
                    "content": "<p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], n = 2\n<strong>Output:</strong> [1,2,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1], n = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2], n = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>sz</code>.</li>\n\t<li><code>1 &lt;= sz &lt;= 30</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do this in one pass?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type n: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RemoveNthFromEnd(ListNode head, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $n\n     * @return ListNode\n     */\n    function removeNthFromEnd($head, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeNthFromEnd(head: ListNode?, n: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? removeNthFromEnd(ListNode? head, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeNthFromEnd(head: ListNode, n: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_nth_from_end(head: Option<Box<ListNode>>, n: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (remove-nth-from-end head n)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec remove_nth_from_end(Head :: #list_node{} | null, N :: integer()) -> #list_node{} | null.\nremove_nth_from_end(Head, N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec remove_nth_from_end(head :: ListNode.t | nil, n :: integer) :: ListNode.t | nil\n  def remove_nth_from_end(head, n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "20",
                    "title": "Valid Parentheses",
                    "titleSlug": "valid-parentheses",
                    "difficulty": "Easy",
                    "content": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()[]{}&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;(]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([])&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isValid(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isValid(s: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isValid(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isValid(s string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "21",
                    "title": "Merge Two Sorted Lists",
                    "titleSlug": "merge-two-sorted-lists",
                    "difficulty": "Easy",
                    "content": "<p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p>\n\n<p>Merge the two lists into one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p>\n\n<p>Return <em>the head of the merged linked list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" style=\"width: 662px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> list1 = [1,2,4], list2 = [1,3,4]\n<strong>Output:</strong> [1,1,2,3,4,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [], list2 = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [], list2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(list1, list2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $list1\n     * @param ListNode $list2\n     * @return ListNode\n     */\n    function mergeTwoLists($list1, $list2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeTwoLists(ListNode? list1, ListNode? list2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} list1\n# @param {ListNode} list2\n# @return {ListNode}\ndef merge_two_lists(list1, list2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-two-lists list1 list2)\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_two_lists(List1 :: #list_node{} | null, List2 :: #list_node{} | null) -> #list_node{} | null.\nmerge_two_lists(List1, List2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_two_lists(list1 :: ListNode.t | nil, list2 :: ListNode.t | nil) :: ListNode.t | nil\n  def merge_two_lists(list1, list2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "22",
                    "title": "Generate Parentheses",
                    "titleSlug": "generate-parentheses",
                    "difficulty": "Medium",
                    "content": "<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function generateParenthesis(n: number): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> generateParenthesis(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func generateParenthesis(n int) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "23",
                    "title": "Merge k Sorted Lists",
                    "titleSlug": "merge-k-sorted-lists",
                    "difficulty": "Hard",
                    "content": "<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>\n\n<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>Output:</strong> [1,1,2,3,4,4,5,6]\n<strong>Explanation:</strong> The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[]]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>k == lists.length</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li>The sum of <code>lists[i].length</code> will not exceed <code>10<sup>4</sup></code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[Optional[ListNode]]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? mergeKLists(List<ListNode?> lists) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (merge-k-lists lists)\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\nmerge_k_lists(Lists) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\n  def merge_k_lists(lists) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "24",
                    "title": "Swap Nodes in Pairs",
                    "titleSlug": "swap-nodes-in-pairs",
                    "difficulty": "Medium",
                    "content": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head. You must solve the problem without&nbsp;modifying the values in the list&#39;s nodes (i.e., only nodes themselves may be changed.)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,1,4,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" style=\"width: 422px; height: 222px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = []</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">head = [1,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,1,3]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the&nbsp;list&nbsp;is in the range <code>[0, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* swapPairs(struct ListNode* head) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode SwapPairs(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction swapPairs(head: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function swapPairs($head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func swapPairs(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun swapPairs(head: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? swapPairs(ListNode? head) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc swapPairs(head *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef swap_pairs(head)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def swapPairs(head: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn swap_pairs(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (swap-pairs head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec swap_pairs(Head :: #list_node{} | null) -> #list_node{} | null.\nswap_pairs(Head) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec swap_pairs(head :: ListNode.t | nil) :: ListNode.t | nil\n  def swap_pairs(head) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "25",
                    "title": "Reverse Nodes in k-Group",
                    "titleSlug": "reverse-nodes-in-k-group",
                    "difficulty": "Hard",
                    "content": "<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p>\n\n<p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p>\n\n<p>You may not alter the values in the list&#39;s nodes, only nodes themselves may be changed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [2,1,4,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 3\n<strong>Output:</strong> [3,2,1,4,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you solve the problem in <code>O(1)</code> extra memory space?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type k: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseKGroup(struct ListNode* head, int k) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseKGroup(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function(head, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseKGroup(head: ListNode | null, k: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function reverseKGroup($head, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseKGroup(_ head: ListNode?, _ k: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseKGroup(head: ListNode?, k: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? reverseKGroup(ListNode? head, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef reverse_k_group(head, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseKGroup(head: ListNode, k: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_k_group(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (reverse-k-group head k)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec reverse_k_group(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\nreverse_k_group(Head, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec reverse_k_group(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\n  def reverse_k_group(head, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "26",
                    "title": "Remove Duplicates from Sorted Array",
                    "titleSlug": "remove-duplicates-from-sorted-array",
                    "difficulty": "Easy",
                    "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>. Then return <em>the number of unique elements in </em><code>nums</code>.</p>\n\n<p>Consider the number of unique elements of <code>nums</code> to be <code>k</code>, to get accepted, you need to do the following things:</p>\n\n<ul>\n\t<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the unique elements in the order they were present in <code>nums</code> initially. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>\n\t<li>Return <code>k</code>.</li>\n</ul>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 2, nums = [1,2,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>Output:</strong> 5, nums = [0,1,2,3,4,_,_,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int removeDuplicates(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function removeDuplicates(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func removeDuplicates(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "27",
                    "title": "Remove Element",
                    "titleSlug": "remove-element",
                    "difficulty": "Easy",
                    "content": "<p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>. The order of the elements may be changed. Then return <em>the number of elements in </em><code>nums</code><em> which are not equal to </em><code>val</code>.</p>\n\n<p>Consider the number of elements in <code>nums</code> which are not equal to <code>val</code> be <code>k</code>, to get accepted, you need to do the following things:</p>\n\n<ul>\n\t<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>\n\t<li>Return <code>k</code>.</li>\n</ul>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,2,3], val = 3\n<strong>Output:</strong> 2, nums = [2,2,_,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,2,3,0,4,2], val = 2\n<strong>Output:</strong> 5, nums = [0,1,4,0,3,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int removeElement(int[] nums, int val) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int removeElement(int* nums, int numsSize, int val) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RemoveElement(int[] nums, int val) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function(nums, val) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function removeElement(nums: number[], val: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $val\n     * @return Integer\n     */\n    function removeElement(&$nums, $val) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func removeElement(_ nums: inout [Int], _ val: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun removeElement(nums: IntArray, `val`: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int removeElement(List<int> nums, int val) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func removeElement(nums []int, val int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} val\n# @return {Integer}\ndef remove_element(nums, val)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def removeElement(nums: Array[Int], `val`: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn remove_element(nums: &mut Vec<i32>, val: i32) -> i32 {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "28",
                    "title": "Find the Index of the First Occurrence in a String",
                    "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
                    "difficulty": "Easy",
                    "content": "<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;sad&quot; occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int strStr(char* haystack, char* needle) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function strStr(haystack: string, needle: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func strStr(haystack string, needle string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "29",
                    "title": "Divide Two Integers",
                    "titleSlug": "divide-two-integers",
                    "difficulty": "Medium",
                    "content": "<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers <strong>without</strong> using multiplication, division, and mod operator.</p>\n\n<p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>8.345</code> would be truncated to <code>8</code>, and <code>-2.7335</code> would be truncated to <code>-2</code>.</p>\n\n<p>Return <em>the <strong>quotient</strong> after dividing </em><code>dividend</code><em> by </em><code>divisor</code>.</p>\n\n<p><strong>Note: </strong>Assume we are dealing with an environment that could only store integers within the <strong>32-bit</strong> signed integer range: <code>[&minus;2<sup>31</sup>, 2<sup>31</sup> &minus; 1]</code>. For this problem, if the quotient is <strong>strictly greater than</strong> <code>2<sup>31</sup> - 1</code>, then return <code>2<sup>31</sup> - 1</code>, and if the quotient is <strong>strictly less than</strong> <code>-2<sup>31</sup></code>, then return <code>-2<sup>31</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 10, divisor = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 10/3 = 3.33333.. which is truncated to 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 7, divisor = -3\n<strong>Output:</strong> -2\n<strong>Explanation:</strong> 7/-3 = -2.33333.. which is truncated to -2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>divisor != 0</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int divide(int dividend, int divisor) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int divide(int dividend, int divisor) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Divide(int dividend, int divisor) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function divide(dividend: number, divisor: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int divide(int dividend, int divisor) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func divide(dividend int, divisor int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (divide dividend divisor)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\ndivide(Dividend, Divisor) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\n  def divide(dividend, divisor) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "30",
                    "title": "Substring with Concatenation of All Words",
                    "titleSlug": "substring-with-concatenation-of-all-words",
                    "difficulty": "Hard",
                    "content": "<p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of <strong>the same length</strong>.</p>\n\n<p>A <strong>concatenated string</strong> is a string that exactly contains all the strings of any permutation of <code>words</code> concatenated.</p>\n\n<ul>\n\t<li>For example, if <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>, then <code>&quot;abcdef&quot;</code>, <code>&quot;abefcd&quot;</code>, <code>&quot;cdabef&quot;</code>, <code>&quot;cdefab&quot;</code>, <code>&quot;efabcd&quot;</code>, and <code>&quot;efcdab&quot;</code> are all concatenated strings. <code>&quot;acdbef&quot;</code> is not a concatenated string because it is not the concatenation of any permutation of <code>words</code>.</li>\n</ul>\n\n<p>Return an array of <em>the starting indices</em> of all the concatenated substrings in <code>s</code>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,9]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substring starting at 0 is <code>&quot;barfoo&quot;</code>. It is the concatenation of <code>[&quot;bar&quot;,&quot;foo&quot;]</code> which is a permutation of <code>words</code>.<br />\nThe substring starting at 9 is <code>&quot;foobar&quot;</code>. It is the concatenation of <code>[&quot;foo&quot;,&quot;bar&quot;]</code> which is a permutation of <code>words</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no concatenated substring.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[6,9,12]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substring starting at 6 is <code>&quot;foobarthe&quot;</code>. It is the concatenation of <code>[&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;]</code>.<br />\nThe substring starting at 9 is <code>&quot;barthefoo&quot;</code>. It is the concatenation of <code>[&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;]</code>.<br />\nThe substring starting at 12 is <code>&quot;thefoobar&quot;</code>. It is the concatenation of <code>[&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<int> FindSubstring(string s, string[] words) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function findSubstring(s: string, words: string[]): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> findSubstring(String s, List<String> words) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func findSubstring(s string, words []string) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn find_substring(s: String, words: Vec<String>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (find-substring s words)\n  (-> string? (listof string?) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [integer()].\nfind_substring(S, Words) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\n  def find_substring(s, words) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "31",
                    "title": "Next Permutation",
                    "titleSlug": "next-permutation",
                    "difficulty": "Medium",
                    "content": "<p>A <strong>permutation</strong> of an array of integers is an arrangement of its members into a sequence or linear order.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [1,2,3]</code>, the following are all the permutations of <code>arr</code>: <code>[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.</li>\n</ul>\n\n<p>The <strong>next permutation</strong> of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the <strong>next permutation</strong> of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</p>\n\n<ul>\n\t<li>For example, the next permutation of <code>arr = [1,2,3]</code> is <code>[1,3,2]</code>.</li>\n\t<li>Similarly, the next permutation of <code>arr = [2,3,1]</code> is <code>[3,1,2]</code>.</li>\n\t<li>While the next permutation of <code>arr = [3,2,1]</code> is <code>[1,2,3]</code> because <code>[3,2,1]</code> does not have a lexicographical larger rearrangement.</li>\n</ul>\n\n<p>Given an array of integers <code>nums</code>, <em>find the next permutation of</em> <code>nums</code>.</p>\n\n<p>The replacement must be <strong><a href=\"http://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a></strong> and use only constant extra memory.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,5]\n<strong>Output:</strong> [1,5,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void nextPermutation(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void nextPermutation(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void nextPermutation(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void NextPermutation(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction nextPermutation(nums: number[]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function nextPermutation(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func nextPermutation(_ nums: inout [Int]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun nextPermutation(nums: IntArray): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void nextPermutation(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func nextPermutation(nums []int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef next_permutation(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def nextPermutation(nums: Array[Int]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn next_permutation(nums: &mut Vec<i32>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "32",
                    "title": "Longest Valid Parentheses",
                    "titleSlug": "longest-valid-parentheses",
                    "difficulty": "Hard",
                    "content": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, return <em>the length of the longest valid (well-formed) parentheses </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int longestValidParentheses(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function longestValidParentheses(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int longestValidParentheses(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func longestValidParentheses(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "33",
                    "title": "Search in Rotated Sorted Array",
                    "titleSlug": "search-in-rotated-sorted-array",
                    "difficulty": "Medium",
                    "content": "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>\n\n<p>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is an ascending array that is possibly rotated.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int search(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function search(nums: number[], target: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int search(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func search(nums []int, target int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search(Nums :: [integer()], Target :: integer()) -> integer().\nsearch(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: integer\n  def search(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "34",
                    "title": "Find First and Last Position of Element in Sorted Array",
                    "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
                    "difficulty": "Medium",
                    "content": "<p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p>\n\n<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8\n<strong>Output:</strong> [3,4]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6\n<strong>Output:</strong> [-1,-1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [], target = 0\n<strong>Output:</strong> [-1,-1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums</code> is a non-decreasing array.</li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function searchRange(nums: number[], target: number): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> searchRange(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func searchRange(nums []int, target int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search-range nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\nsearch_range(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\n  def search_range(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "35",
                    "title": "Search Insert Position",
                    "titleSlug": "search-insert-position",
                    "difficulty": "Easy",
                    "content": "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 5\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 7\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int searchInsert(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function searchInsert(nums: number[], target: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int searchInsert(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func searchInsert(nums []int, target int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search-insert nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search_insert(Nums :: [integer()], Target :: integer()) -> integer().\nsearch_insert(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\n  def search_insert(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "36",
                    "title": "Valid Sudoku",
                    "titleSlug": "valid-sudoku",
                    "difficulty": "Medium",
                    "content": "<p>Determine if a&nbsp;<code>9 x 9</code> Sudoku board&nbsp;is valid.&nbsp;Only the filled cells need to be validated&nbsp;<strong>according to the following rules</strong>:</p>\n\n<ol>\n\t<li>Each row&nbsp;must contain the&nbsp;digits&nbsp;<code>1-9</code> without repetition.</li>\n\t<li>Each column must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\n\t<li>Each of the nine&nbsp;<code>3 x 3</code> sub-boxes of the grid must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\n\t<li>Only the filled cells need to be validated according to the mentioned&nbsp;rules.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" />\n<pre>\n<strong>Input:</strong> board = \n[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]\n,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]\n,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]\n,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]\n,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = \n[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]\n,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]\n,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]\n,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]\n,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Same as Example 1, except with the <strong>5</strong> in the top left corner being modified to <strong>8</strong>. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 9</code></li>\n\t<li><code>board[i].length == 9</code></li>\n\t<li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>&#39;.&#39;</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isValidSudoku(char** board, int boardSize, int* boardColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsValidSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isValidSudoku(board: string[][]): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Boolean\n     */\n    function isValidSudoku($board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isValidSudoku(_ board: [[Character]]) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isValidSudoku(board: Array<CharArray>): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isValidSudoku(List<List<String>> board) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isValidSudoku(board [][]byte) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} board\n# @return {Boolean}\ndef is_valid_sudoku(board)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-valid-sudoku board)\n  (-> (listof (listof char?)) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_valid_sudoku(Board :: [[char()]]) -> boolean().\nis_valid_sudoku(Board) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_valid_sudoku(board :: [[char]]) :: boolean\n  def is_valid_sudoku(board) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "37",
                    "title": "Sudoku Solver",
                    "titleSlug": "sudoku-solver",
                    "difficulty": "Hard",
                    "content": "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\n\n<p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p>\n\n<ol>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\n</ol>\n\n<p>The <code>&#39;.&#39;</code> character indicates empty cells.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> [[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Explanation:</strong>&nbsp;The input board is shown above and the only valid solution is shown below:\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" />\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 9</code></li>\n\t<li><code>board[i].length == 9</code></li>\n\t<li><code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the input board has only one solution.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void solveSudoku(char** board, int boardSize, int* boardColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solveSudoku(board: string[][]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void solveSudoku(List<List<String>> board) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func solveSudoku(board [][]byte)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "38",
                    "title": "Count and Say",
                    "titleSlug": "count-and-say",
                    "difficulty": "Medium",
                    "content": "<p>The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula:</p>\n\n<ul>\n\t<li><code>countAndSay(1) = &quot;1&quot;</code></li>\n\t<li><code>countAndSay(n)</code> is the run-length encoding of <code>countAndSay(n - 1)</code>.</li>\n</ul>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Run-length_encoding\" target=\"_blank\">Run-length encoding</a> (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string <code>&quot;3322251&quot;</code> we replace <code>&quot;33&quot;</code> with <code>&quot;23&quot;</code>, replace <code>&quot;222&quot;</code> with <code>&quot;32&quot;</code>, replace <code>&quot;5&quot;</code> with <code>&quot;15&quot;</code> and replace <code>&quot;1&quot;</code> with <code>&quot;11&quot;</code>. Thus the compressed string becomes <code>&quot;23321511&quot;</code>.</p>\n\n<p>Given a positive integer <code>n</code>, return <em>the </em><code>n<sup>th</sup></code><em> element of the <strong>count-and-say</strong> sequence</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;1211&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<pre>\ncountAndSay(1) = &quot;1&quot;\ncountAndSay(2) = RLE of &quot;1&quot; = &quot;11&quot;\ncountAndSay(3) = RLE of &quot;11&quot; = &quot;21&quot;\ncountAndSay(4) = RLE of &quot;21&quot; = &quot;1211&quot;\n</pre>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;1&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>This is the base case.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it iteratively?",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string countAndSay(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String countAndSay(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* countAndSay(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string CountAndSay(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function countAndSay(n: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function countAndSay($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func countAndSay(_ n: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun countAndSay(n: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String countAndSay(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func countAndSay(n int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {String}\ndef count_and_say(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def countAndSay(n: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn count_and_say(n: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (count-and-say n)\n  (-> exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec count_and_say(N :: integer()) -> unicode:unicode_binary().\ncount_and_say(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec count_and_say(n :: integer) :: String.t\n  def count_and_say(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "39",
                    "title": "Combination Sum",
                    "titleSlug": "combination-sum",
                    "difficulty": "Medium",
                    "content": "<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p>\n\n<p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the <span data-keyword=\"frequency-array\">frequency</span> of at least one of the chosen numbers is different.</p>\n\n<p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,6,7], target = 7\n<strong>Output:</strong> [[2,2,3],[7]]\n<strong>Explanation:</strong>\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,5], target = 8\n<strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2], target = 1\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 30</code></li>\n\t<li><code>2 &lt;= candidates[i] &lt;= 40</code></li>\n\t<li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 40</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> CombinationSum(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function combinationSum(candidates: number[], target: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum($candidates, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> combinationSum(List<int> candidates, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func combinationSum(candidates []int, target int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum(candidates, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn combination_sum(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (combination-sum candidates target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec combination_sum(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\ncombination_sum(Candidates, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec combination_sum(candidates :: [integer], target :: integer) :: [[integer]]\n  def combination_sum(candidates, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "40",
                    "title": "Combination Sum II",
                    "titleSlug": "combination-sum-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sum to <code>target</code>.</p>\n\n<p>Each number in <code>candidates</code>&nbsp;may only be used <strong>once</strong> in the combination.</p>\n\n<p><strong>Note:</strong>&nbsp;The solution set must not contain duplicate combinations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [10,1,2,7,6,1,5], target = 8\n<strong>Output:</strong> \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,5,2,1,2], target = 5\n<strong>Output:</strong> \n[\n[1,2,2],\n[5]\n]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;candidates.length &lt;= 100</code></li>\n\t<li><code>1 &lt;=&nbsp;candidates[i] &lt;= 50</code></li>\n\t<li><code>1 &lt;= target &lt;= 30</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum2(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function combinationSum2(candidates: number[], target: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum2($candidates, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun combinationSum2(candidates: IntArray, target: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> combinationSum2(List<int> candidates, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func combinationSum2(candidates []int, target int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum2(candidates, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def combinationSum2(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn combination_sum2(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (combination-sum2 candidates target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec combination_sum2(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\ncombination_sum2(Candidates, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec combination_sum2(candidates :: [integer], target :: integer) :: [[integer]]\n  def combination_sum2(candidates, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "41",
                    "title": "First Missing Positive",
                    "titleSlug": "first-missing-positive",
                    "difficulty": "Hard",
                    "content": "<p>Given an unsorted integer array <code>nums</code>. Return the <em>smallest positive integer</em> that is <em>not present</em> in <code>nums</code>.</p>\n\n<p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The numbers in the range [1,2] are all in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1 is in the array but 2 is missing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The smallest positive integer 1 is missing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int firstMissingPositive(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function firstMissingPositive(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function firstMissingPositive($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func firstMissingPositive(_ nums: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun firstMissingPositive(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int firstMissingPositive(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func firstMissingPositive(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef first_missing_positive(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn first_missing_positive(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (first-missing-positive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec first_missing_positive(Nums :: [integer()]) -> integer().\nfirst_missing_positive(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec first_missing_positive(nums :: [integer]) :: integer\n  def first_missing_positive(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "42",
                    "title": "Trapping Rain Water",
                    "titleSlug": "trapping-rain-water",
                    "difficulty": "Hard",
                    "content": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int trap(int* height, int heightSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function trap(height: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int trap(List<int> height) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func trap(height []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "43",
                    "title": "Multiply Strings",
                    "titleSlug": "multiply-strings",
                    "difficulty": "Medium",
                    "content": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\n\n<p><strong>Note:</strong>&nbsp;You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> num1 = \"2\", num2 = \"3\"\n<strong>Output:</strong> \"6\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> num1 = \"123\", num2 = \"456\"\n<strong>Output:</strong> \"56088\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of digits only.</li>\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number <code>0</code> itself.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string multiply(string num1, string num2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String multiply(String num1, String num2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* multiply(char* num1, char* num2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string Multiply(string num1, string num2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function multiply(num1: string, num2: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function multiply($num1, $num2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func multiply(_ num1: String, _ num2: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun multiply(num1: String, num2: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String multiply(String num1, String num2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func multiply(num1 string, num2 string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef multiply(num1, num2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def multiply(num1: String, num2: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn multiply(num1: String, num2: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (multiply num1 num2)\n  (-> string? string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmultiply(Num1, Num2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\n  def multiply(num1, num2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "44",
                    "title": "Wildcard Matching",
                    "titleSlug": "wildcard-matching",
                    "difficulty": "Hard",
                    "content": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;?&#39;</code> Matches any single character.</li>\n\t<li><code>&#39;*&#39;</code> Matches any sequence of characters (including the empty sequence).</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cb&quot;, p = &quot;?a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;?&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isMatch(char* s, char* p) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isMatch(s: string, p: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isMatch(String s, String p) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isMatch(s string, p string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-match s p)\n  (-> string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\nis_match(S, P) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\n  def is_match(s, p) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "45",
                    "title": "Jump Game II",
                    "titleSlug": "jump-game-ii",
                    "difficulty": "Medium",
                    "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p>\n\n<p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= j &lt;= nums[i]</code> and</li>\n\t<li><code>i + j &lt; n</code></li>\n</ul>\n\n<p>Return <em>the minimum number of jumps to reach </em><code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,0,1,4]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>It&#39;s guaranteed that you can reach <code>nums[n - 1]</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int jump(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int jump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int jump(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int Jump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function jump(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function jump($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func jump(_ nums: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun jump(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int jump(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func jump(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef jump(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def jump(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn jump(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (jump nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec jump(Nums :: [integer()]) -> integer().\njump(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec jump(nums :: [integer]) :: integer\n  def jump(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "46",
                    "title": "Permutations",
                    "titleSlug": "permutations",
                    "difficulty": "Medium",
                    "content": "<p>Given an array <code>nums</code> of distinct integers, return all the possible <span data-keyword=\"permutation-array\">permutations</span>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [[0,1],[1,0]]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 6</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> Permute(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function permute(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func permute(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun permute(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> permute(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func permute(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (permute nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec permute(Nums :: [integer()]) -> [[integer()]].\npermute(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec permute(nums :: [integer]) :: [[integer]]\n  def permute(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "47",
                    "title": "Permutations II",
                    "titleSlug": "permutations-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given a collection of numbers, <code>nums</code>,&nbsp;that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 8</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> PermuteUnique(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function permuteUnique(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permuteUnique($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun permuteUnique(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> permuteUnique(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func permuteUnique(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute_unique(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn permute_unique(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (permute-unique nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec permute_unique(Nums :: [integer()]) -> [[integer()]].\npermute_unique(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec permute_unique(nums :: [integer]) :: [[integer]]\n  def permute_unique(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "48",
                    "title": "Rotate Image",
                    "titleSlug": "rotate-image",
                    "difficulty": "Medium",
                    "content": "<p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).</p>\n\n<p>You have to rotate the image <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg\" style=\"width: 500px; height: 188px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg\" style=\"width: 500px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n<strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void Rotate(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction rotate(matrix: number[][]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun rotate(matrix: Array<IntArray>): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void rotate(List<List<int>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func rotate(matrix [][]int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef rotate(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "49",
                    "title": "Group Anagrams",
                    "titleSlug": "group-anagrams",
                    "difficulty": "Medium",
                    "content": "<p>Given an array of strings <code>strs</code>, group the <span data-keyword=\"anagram\">anagrams</span> together. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strs = [&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>There is no string in strs that can be rearranged to form <code>&quot;bat&quot;</code>.</li>\n\t<li>The strings <code>&quot;nat&quot;</code> and <code>&quot;tan&quot;</code> are anagrams as they can be rearranged to form each other.</li>\n\t<li>The strings <code>&quot;ate&quot;</code>, <code>&quot;eat&quot;</code>, and <code>&quot;tea&quot;</code> are anagrams as they can be rearranged to form each other.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strs = [&quot;&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;&quot;]]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">strs = [&quot;a&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[&quot;a&quot;]]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function groupAnagrams(strs: string[]): string[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<String>> groupAnagrams(List<String> strs) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func groupAnagrams(strs []string) [][]string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (group-anagrams strs)\n  (-> (listof string?) (listof (listof string?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "50",
                    "title": "Pow(x, n)",
                    "titleSlug": "powx-n",
                    "difficulty": "Medium",
                    "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li>\n\t<li><code>n</code> is an integer.</li>\n\t<li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "double myPow(double x, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public double MyPow(double x, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function myPow(x: number, n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun myPow(x: Double, n: Int): Double {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  double myPow(double x, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func myPow(x float64, n int) float64 {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def myPow(x: Double, n: Int): Double = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "51",
                    "title": "N-Queens",
                    "titleSlug": "n-queens",
                    "difficulty": "Hard",
                    "content": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens puzzle</strong></em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>Each solution contains a distinct board configuration of the n-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space, respectively.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> [[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[&quot;Q&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<string>> SolveNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function solveNQueens(n: number): string[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[][]\n     */\n    function solveNQueens($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func solveNQueens(_ n: Int) -> [[String]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun solveNQueens(n: Int): List<List<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<String>> solveNQueens(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func solveNQueens(n int) [][]string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {String[][]}\ndef solve_n_queens(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def solveNQueens(n: Int): List[List[String]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn solve_n_queens(n: i32) -> Vec<Vec<String>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (solve-n-queens n)\n  (-> exact-integer? (listof (listof string?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec solve_n_queens(N :: integer()) -> [[unicode:unicode_binary()]].\nsolve_n_queens(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec solve_n_queens(n :: integer) :: [[String.t]]\n  def solve_n_queens(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "52",
                    "title": "N-Queens II",
                    "titleSlug": "n-queens-ii",
                    "difficulty": "Hard",
                    "content": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>the number of distinct solutions to the&nbsp;<strong>n-queens puzzle</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two distinct solutions to the 4-queens puzzle as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int totalNQueens(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int totalNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int totalNQueens(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int TotalNQueens(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar totalNQueens = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function totalNQueens(n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function totalNQueens($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func totalNQueens(_ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun totalNQueens(n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int totalNQueens(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func totalNQueens(n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer}\ndef total_n_queens(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def totalNQueens(n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn total_n_queens(n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (total-n-queens n)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec total_n_queens(N :: integer()) -> integer().\ntotal_n_queens(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec total_n_queens(n :: integer) :: integer\n  def total_n_queens(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "53",
                    "title": "Maximum Subarray",
                    "titleSlug": "maximum-subarray",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer array <code>nums</code>, find the <span data-keyword=\"subarray-nonempty\">subarray</span> with the largest sum, and return <em>its sum</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The subarray [4,-1,2,1] has the largest sum 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The subarray [1] has the largest sum 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,-1,7,8]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> The subarray [5,4,-1,7,8] has the largest sum 23.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int maxSubArray(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MaxSubArray(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function maxSubArray(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubArray($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func maxSubArray(_ nums: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun maxSubArray(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int maxSubArray(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func maxSubArray(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sub_array(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (max-sub-array nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec max_sub_array(Nums :: [integer()]) -> integer().\nmax_sub_array(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec max_sub_array(nums :: [integer]) :: integer\n  def max_sub_array(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "54",
                    "title": "Spiral Matrix",
                    "titleSlug": "spiral-matrix",
                    "difficulty": "Medium",
                    "content": "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n<strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<int> SpiralOrder(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function spiralOrder(matrix: number[][]): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function spiralOrder($matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> spiralOrder(List<List<int>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func spiralOrder(matrix [][]int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef spiral_order(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (spiral-order matrix)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec spiral_order(Matrix :: [[integer()]]) -> [integer()].\nspiral_order(Matrix) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec spiral_order(matrix :: [[integer]]) :: [integer]\n  def spiral_order(matrix) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "55",
                    "title": "Jump Game",
                    "titleSlug": "jump-game",
                    "difficulty": "Medium",
                    "content": "<p>You are given an integer array <code>nums</code>. You are initially positioned at the array&#39;s <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p>\n\n<p>Return <code>true</code><em> if you can reach the last index, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,0,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool canJump(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function canJump(nums: number[]): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool canJump(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func canJump(nums []int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "56",
                    "title": "Merge Intervals",
                    "titleSlug": "merge-intervals",
                    "difficulty": "Medium",
                    "content": "<p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[4,5]]\n<strong>Output:</strong> [[1,5]]\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def merge(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[][] Merge(int[][] intervals) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function merge(intervals: number[][]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer[][]\n     */\n    function merge($intervals) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func merge(_ intervals: [[Int]]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun merge(intervals: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> merge(List<List<int>> intervals) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func merge(intervals [][]int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} intervals\n# @return {Integer[][]}\ndef merge(intervals)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (merge intervals)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec merge(Intervals :: [[integer()]]) -> [[integer()]].\nmerge(Intervals) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\n  def merge(intervals) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "57",
                    "title": "Insert Interval",
                    "titleSlug": "insert-interval",
                    "difficulty": "Medium",
                    "content": "<p>You are given an array of non-overlapping intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represent the start and the end of the <code>i<sup>th</sup></code> interval and <code>intervals</code> is sorted in ascending order by <code>start<sub>i</sub></code>. You are also given an interval <code>newInterval = [start, end]</code> that represents the start and end of another interval.</p>\n\n<p>Insert <code>newInterval</code> into <code>intervals</code> such that <code>intervals</code> is still sorted in ascending order by <code>start<sub>i</sub></code> and <code>intervals</code> still does not have any overlapping intervals (merge overlapping intervals if necessary).</p>\n\n<p>Return <code>intervals</code><em> after the insertion</em>.</p>\n\n<p><strong>Note</strong> that you don&#39;t need to modify <code>intervals</code> in-place. You can make a new array and return it.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>Output:</strong> [[1,5],[6,9]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n<strong>Output:</strong> [[1,2],[3,10],[12,16]]\n<strong>Explanation:</strong> Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals</code> is sorted by <code>start<sub>i</sub></code> in <strong>ascending</strong> order.</li>\n\t<li><code>newInterval.length == 2</code></li>\n\t<li><code>0 &lt;= start &lt;= end &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[][] Insert(int[][] intervals, int[] newInterval) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} intervals\n * @param {number[]} newInterval\n * @return {number[][]}\n */\nvar insert = function(intervals, newInterval) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function insert(intervals: number[][], newInterval: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $newInterval\n     * @return Integer[][]\n     */\n    function insert($intervals, $newInterval) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func insert(_ intervals: [[Int]], _ newInterval: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun insert(intervals: Array<IntArray>, newInterval: IntArray): Array<IntArray> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> insert(List<List<int>> intervals, List<int> newInterval) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func insert(intervals [][]int, newInterval []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} intervals\n# @param {Integer[]} new_interval\n# @return {Integer[][]}\ndef insert(intervals, new_interval)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def insert(intervals: Array[Array[Int]], newInterval: Array[Int]): Array[Array[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn insert(intervals: Vec<Vec<i32>>, new_interval: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (insert intervals newInterval)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec insert(Intervals :: [[integer()]], NewInterval :: [integer()]) -> [[integer()]].\ninsert(Intervals, NewInterval) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec insert(intervals :: [[integer]], new_interval :: [integer]) :: [[integer]]\n  def insert(intervals, new_interval) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "58",
                    "title": "Length of Last Word",
                    "titleSlug": "length-of-last-word",
                    "difficulty": "Easy",
                    "content": "<p>Given a string <code>s</code> consisting of words and spaces, return <em>the length of the <strong>last</strong> word in the string.</em></p>\n\n<p>A <strong>word</strong> is a maximal <span data-keyword=\"substring-nonempty\">substring</span> consisting of non-space characters only.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello World&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The last word is &quot;World&quot; with length 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;   fly me   to   the moon  &quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The last word is &quot;moon&quot; with length 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;luffy is still joyboy&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The last word is &quot;joyboy&quot; with length 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There will be at least one word in <code>s</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int lengthOfLastWord(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int lengthOfLastWord(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LengthOfLastWord(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLastWord = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function lengthOfLastWord(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLastWord($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func lengthOfLastWord(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun lengthOfLastWord(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int lengthOfLastWord(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func lengthOfLastWord(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef length_of_last_word(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def lengthOfLastWord(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn length_of_last_word(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (length-of-last-word s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec length_of_last_word(S :: unicode:unicode_binary()) -> integer().\nlength_of_last_word(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec length_of_last_word(s :: String.t) :: integer\n  def length_of_last_word(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "59",
                    "title": "Spiral Matrix II",
                    "titleSlug": "spiral-matrix-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n<sup>2</sup></code> in spiral order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [[1,2,3],[8,9,4],[7,6,5]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[][] generateMatrix(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generateMatrix(int n, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[][] GenerateMatrix(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number[][]}\n */\nvar generateMatrix = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function generateMatrix(n: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function generateMatrix($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func generateMatrix(_ n: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun generateMatrix(n: Int): Array<IntArray> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> generateMatrix(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func generateMatrix(n int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer[][]}\ndef generate_matrix(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def generateMatrix(n: Int): Array[Array[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn generate_matrix(n: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (generate-matrix n)\n  (-> exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec generate_matrix(N :: integer()) -> [[integer()]].\ngenerate_matrix(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec generate_matrix(n :: integer) :: [[integer]]\n  def generate_matrix(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "60",
                    "title": "Permutation Sequence",
                    "titleSlug": "permutation-sequence",
                    "difficulty": "Hard",
                    "content": "<p>The set <code>[1, 2, 3, ...,&nbsp;n]</code> contains a total of <code>n!</code> unique permutations.</p>\n\n<p>By listing and labeling all of the permutations in order, we get the following sequence for <code>n = 3</code>:</p>\n\n<ol>\n\t<li><code>&quot;123&quot;</code></li>\n\t<li><code>&quot;132&quot;</code></li>\n\t<li><code>&quot;213&quot;</code></li>\n\t<li><code>&quot;231&quot;</code></li>\n\t<li><code>&quot;312&quot;</code></li>\n\t<li><code>&quot;321&quot;</code></li>\n</ol>\n\n<p>Given <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> permutation sequence.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 3\n<strong>Output:</strong> \"213\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 4, k = 9\n<strong>Output:</strong> \"2314\"\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> \"123\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n\t<li><code>1 &lt;= k &lt;= n!</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string getPermutation(int n, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String getPermutation(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* getPermutation(int n, int k) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string GetPermutation(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getPermutation = function(n, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function getPermutation(n: number, k: number): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function getPermutation($n, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func getPermutation(_ n: Int, _ k: Int) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun getPermutation(n: Int, k: Int): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String getPermutation(int n, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func getPermutation(n int, k int) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef get_permutation(n, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def getPermutation(n: Int, k: Int): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn get_permutation(n: i32, k: i32) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (get-permutation n k)\n  (-> exact-integer? exact-integer? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec get_permutation(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nget_permutation(N, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec get_permutation(n :: integer, k :: integer) :: String.t\n  def get_permutation(n, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "61",
                    "title": "Rotate List",
                    "titleSlug": "rotate-list",
                    "difficulty": "Medium",
                    "content": "<p>Given the <code>head</code> of a linked&nbsp;list, rotate the list to the right by <code>k</code> places.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg\" style=\"width: 450px; height: 191px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [4,5,1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg\" style=\"width: 305px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> head = [0,1,2], k = 4\n<strong>Output:</strong> [2,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 500]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type k: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* rotateRight(struct ListNode* head, int k) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RotateRight(ListNode head, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction rotateRight(head: ListNode | null, k: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function rotateRight($head, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func rotateRight(_ head: ListNode?, _ k: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun rotateRight(head: ListNode?, k: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? rotateRight(ListNode? head, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc rotateRight(head *ListNode, k int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef rotate_right(head, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def rotateRight(head: ListNode, k: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn rotate_right(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (rotate-right head k)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec rotate_right(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\nrotate_right(Head, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec rotate_right(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\n  def rotate_right(head, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "62",
                    "title": "Unique Paths",
                    "titleSlug": "unique-paths",
                    "difficulty": "Medium",
                    "content": "<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>\n\n<p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>\n\n<p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 7\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int uniquePaths(int m, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int uniquePaths(int m, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int UniquePaths(int m, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function uniquePaths(m: number, n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function uniquePaths($m, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int uniquePaths(int m, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func uniquePaths(m int, n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef unique_paths(m, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn unique_paths(m: i32, n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (unique-paths m n)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec unique_paths(M :: integer(), N :: integer()) -> integer().\nunique_paths(M, N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec unique_paths(m :: integer, n :: integer) :: integer\n  def unique_paths(m, n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "63",
                    "title": "Unique Paths II",
                    "titleSlug": "unique-paths-ii",
                    "difficulty": "Medium",
                    "content": "<p>You are given an <code>m x n</code> integer array <code>grid</code>. There is a robot initially located at the <b>top-left corner</b> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>\n\n<p>An obstacle and space are marked as <code>1</code> or <code>0</code> respectively in <code>grid</code>. A path that the robot takes cannot include <strong>any</strong> square that is an obstacle.</p>\n\n<p>Return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>\n\n<p>The testcases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -&gt; Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right -&gt; Right\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> obstacleGrid = [[0,1],[0,0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == obstacleGrid.length</code></li>\n\t<li><code>n == obstacleGrid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridSize, int* obstacleGridColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int UniquePathsWithObstacles(int[][] obstacleGrid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function uniquePathsWithObstacles(obstacleGrid: number[][]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $obstacleGrid\n     * @return Integer\n     */\n    function uniquePathsWithObstacles($obstacleGrid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func uniquePathsWithObstacles(_ obstacleGrid: [[Int]]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int uniquePathsWithObstacles(List<List<int>> obstacleGrid) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func uniquePathsWithObstacles(obstacleGrid [][]int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} obstacle_grid\n# @return {Integer}\ndef unique_paths_with_obstacles(obstacle_grid)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def uniquePathsWithObstacles(obstacleGrid: Array[Array[Int]]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn unique_paths_with_obstacles(obstacle_grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (unique-paths-with-obstacles obstacleGrid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec unique_paths_with_obstacles(ObstacleGrid :: [[integer()]]) -> integer().\nunique_paths_with_obstacles(ObstacleGrid) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec unique_paths_with_obstacles(obstacle_grid :: [[integer]]) :: integer\n  def unique_paths_with_obstacles(obstacle_grid) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "64",
                    "title": "Minimum Path Sum",
                    "titleSlug": "minimum-path-sum",
                    "difficulty": "Medium",
                    "content": "<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p>\n\n<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,3,1],[1,5,1],[4,2,1]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Because the path 1 &rarr; 3 &rarr; 1 &rarr; 1 &rarr; 1 minimizes the sum.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,2,3],[4,5,6]]\n<strong>Output:</strong> 12\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 200</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int minPathSum(int[][] grid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int minPathSum(int** grid, int gridSize, int* gridColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MinPathSum(int[][] grid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minPathSum = function(grid) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function minPathSum(grid: number[][]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minPathSum($grid) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun minPathSum(grid: Array<IntArray>): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int minPathSum(List<List<int>> grid) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func minPathSum(grid [][]int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_path_sum(grid)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def minPathSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn min_path_sum(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (min-path-sum grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec min_path_sum(Grid :: [[integer()]]) -> integer().\nmin_path_sum(Grid) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec min_path_sum(grid :: [[integer]]) :: integer\n  def min_path_sum(grid) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "65",
                    "title": "Valid Number",
                    "titleSlug": "valid-number",
                    "difficulty": "Hard",
                    "content": "<p>Given a string <code>s</code>, return whether <code>s</code> is a <strong>valid number</strong>.<br />\n<br />\nFor example, all the following are valid numbers: <code>&quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;</code>, while the following are not valid numbers: <code>&quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;</code>.</p>\n\n<p>Formally, a&nbsp;<strong>valid number</strong> is defined using one of the following definitions:</p>\n\n<ol>\n\t<li>An <strong>integer number</strong> followed by an <strong>optional exponent</strong>.</li>\n\t<li>A <strong>decimal number</strong> followed by an <strong>optional exponent</strong>.</li>\n</ol>\n\n<p>An <strong>integer number</strong> is defined with an <strong>optional sign</strong> <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code> followed by <strong>digits</strong>.</p>\n\n<p>A <strong>decimal number</strong> is defined with an <strong>optional sign</strong> <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code> followed by one of the following definitions:</p>\n\n<ol>\n\t<li><strong>Digits</strong> followed by a <strong>dot</strong> <code>&#39;.&#39;</code>.</li>\n\t<li><strong>Digits</strong> followed by a <strong>dot</strong> <code>&#39;.&#39;</code> followed by <strong>digits</strong>.</li>\n\t<li>A <strong>dot</strong> <code>&#39;.&#39;</code> followed by <strong>digits</strong>.</li>\n</ol>\n\n<p>An <strong>exponent</strong> is defined with an <strong>exponent notation</strong> <code>&#39;e&#39;</code> or <code>&#39;E&#39;</code> followed by an <strong>integer number</strong>.</p>\n\n<p>The <strong>digits</strong> are defined as one or more digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;e&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;.&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>s</code> consists of only English letters (both uppercase and lowercase), digits (<code>0-9</code>), plus <code>&#39;+&#39;</code>, minus <code>&#39;-&#39;</code>, or dot <code>&#39;.&#39;</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isNumber(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isNumber(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isNumber(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsNumber(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isNumber(s: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isNumber($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isNumber(_ s: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isNumber(s: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isNumber(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isNumber(s string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Boolean}\ndef is_number(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isNumber(s: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_number(s: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-number s)\n  (-> string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_number(S :: unicode:unicode_binary()) -> boolean().\nis_number(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_number(s :: String.t) :: boolean\n  def is_number(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "66",
                    "title": "Plus One",
                    "titleSlug": "plus-one",
                    "difficulty": "Easy",
                    "content": "<p>You are given a <strong>large integer</strong> represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>i<sup>th</sup></code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0</code>&#39;s.</p>\n\n<p>Increment the large integer by one and return <em>the resulting array of digits</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [1,2,3]\n<strong>Output:</strong> [1,2,4]\n<strong>Explanation:</strong> The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [4,3,2,1]\n<strong>Output:</strong> [4,3,2,2]\n<strong>Explanation:</strong> The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [9]\n<strong>Output:</strong> [1,0]\n<strong>Explanation:</strong> The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n\t<li><code>digits</code> does not contain any leading <code>0</code>&#39;s.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int[] PlusOne(int[] digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne = function(digits) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function plusOne(digits: number[]): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer[]\n     */\n    function plusOne($digits) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func plusOne(_ digits: [Int]) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun plusOne(digits: IntArray): IntArray {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> plusOne(List<int> digits) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func plusOne(digits []int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} digits\n# @return {Integer[]}\ndef plus_one(digits)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def plusOne(digits: Array[Int]): Array[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (plus-one digits)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec plus_one(Digits :: [integer()]) -> [integer()].\nplus_one(Digits) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec plus_one(digits :: [integer]) :: [integer]\n  def plus_one(digits) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "67",
                    "title": "Add Binary",
                    "titleSlug": "add-binary",
                    "difficulty": "Easy",
                    "content": "<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* addBinary(char* a, char* b) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function addBinary(a: string, b: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func addBinary(a string, b string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (add-binary a b)\n  (-> string? string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "68",
                    "title": "Text Justification",
                    "titleSlug": "text-justification",
                    "difficulty": "Hard",
                    "content": "<p>Given an array of strings <code>words</code> and a width <code>maxWidth</code>, format the text such that each line has exactly <code>maxWidth</code> characters and is fully (left and right) justified.</p>\n\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <code>maxWidth</code> characters.</p>\n\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n\n<p>For the last line of text, it should be left-justified, and no extra space is inserted between words.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A word is defined as a character sequence consisting of non-space characters only.</li>\n\t<li>Each word&#39;s length is guaranteed to be greater than <code>0</code> and not exceed <code>maxWidth</code>.</li>\n\t<li>The input array <code>words</code> contains at least one word.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20\n<strong>Output:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of only English letters and symbols.</li>\n\t<li><code>1 &lt;= maxWidth &lt;= 100</code></li>\n\t<li><code>words[i].length &lt;= maxWidth</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** fullJustify(char** words, int wordsSize, int maxWidth, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> FullJustify(string[] words, int maxWidth) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function fullJustify(words: string[], maxWidth: number): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $maxWidth\n     * @return String[]\n     */\n    function fullJustify($words, $maxWidth) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func fullJustify(_ words: [String], _ maxWidth: Int) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun fullJustify(words: Array<String>, maxWidth: Int): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> fullJustify(List<String> words, int maxWidth) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func fullJustify(words []string, maxWidth int) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn full_justify(words: Vec<String>, max_width: i32) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (full-justify words maxWidth)\n  (-> (listof string?) exact-integer? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec full_justify(Words :: [unicode:unicode_binary()], MaxWidth :: integer()) -> [unicode:unicode_binary()].\nfull_justify(Words, MaxWidth) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec full_justify(words :: [String.t], max_width :: integer) :: [String.t]\n  def full_justify(words, max_width) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "69",
                    "title": "Sqrt(x)",
                    "titleSlug": "sqrtx",
                    "difficulty": "Easy",
                    "content": "<p>Given a non-negative integer <code>x</code>, return <em>the square root of </em><code>x</code><em> rounded down to the nearest integer</em>. The returned integer should be <strong>non-negative</strong> as well.</p>\n\n<p>You <strong>must not use</strong> any built-in exponent function or operator.</p>\n\n<ul>\n\t<li>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 4 is 2, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 8\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int mySqrt(int x) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MySqrt(int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function mySqrt(x: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func mySqrt(_ x: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun mySqrt(x: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int mySqrt(int x) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func mySqrt(x int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "70",
                    "title": "Climbing Stairs",
                    "titleSlug": "climbing-stairs",
                    "difficulty": "Easy",
                    "content": "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int climbStairs(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function climbStairs(n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int climbStairs(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func climbStairs(n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "71",
                    "title": "Simplify Path",
                    "titleSlug": "simplify-path",
                    "difficulty": "Medium",
                    "content": "<p>You are given an <em>absolute</em> path for a Unix-style file system, which always begins with a slash <code>&#39;/&#39;</code>. Your task is to transform this absolute path into its <strong>simplified canonical path</strong>.</p>\n\n<p>The <em>rules</em> of a Unix-style file system are as follows:</p>\n\n<ul>\n\t<li>A single period <code>&#39;.&#39;</code> represents the current directory.</li>\n\t<li>A double period <code>&#39;..&#39;</code> represents the previous/parent directory.</li>\n\t<li>Multiple consecutive slashes such as <code>&#39;//&#39;</code> and <code>&#39;///&#39;</code> are treated as a single slash <code>&#39;/&#39;</code>.</li>\n\t<li>Any sequence of periods that does <strong>not match</strong> the rules above should be treated as a <strong>valid directory or</strong> <strong>file </strong><strong>name</strong>. For example, <code>&#39;...&#39; </code>and <code>&#39;....&#39;</code> are valid directory or file names.</li>\n</ul>\n\n<p>The simplified canonical path should follow these <em>rules</em>:</p>\n\n<ul>\n\t<li>The path must start with a single slash <code>&#39;/&#39;</code>.</li>\n\t<li>Directories within the path must be separated by exactly one slash <code>&#39;/&#39;</code>.</li>\n\t<li>The path must not end with a slash <code>&#39;/&#39;</code>, unless it is the root directory.</li>\n\t<li>The path must not have any single or double periods (<code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>) used to denote current or parent directories.</li>\n</ul>\n\n<p>Return the <strong>simplified canonical path</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">path = &quot;/home/&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;/home&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The trailing slash should be removed.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">path = &quot;/home//foo/&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;/home/foo&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Multiple consecutive slashes are replaced by a single one.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">path = &quot;/home/user/Documents/../Pictures&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;/home/user/Pictures&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>A double period <code>&quot;..&quot;</code> refers to the directory up a level (the parent directory).</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">path = &quot;/../&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;/&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Going one level up from the root directory is not possible.</p>\n</div>\n\n<p><strong class=\"example\">Example 5:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">path = &quot;/.../a/../b/c/../d/./&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;/.../b/d&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>&quot;...&quot;</code> is a valid name for a directory in this problem.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= path.length &lt;= 3000</code></li>\n\t<li><code>path</code> consists of English letters, digits, period <code>&#39;.&#39;</code>, slash <code>&#39;/&#39;</code> or <code>&#39;_&#39;</code>.</li>\n\t<li><code>path</code> is a valid absolute Unix path.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string simplifyPath(string path) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* simplifyPath(char* path) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string SimplifyPath(string path) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function simplifyPath(path: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function simplifyPath($path) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func simplifyPath(_ path: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun simplifyPath(path: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String simplifyPath(String path) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func simplifyPath(path string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} path\n# @return {String}\ndef simplify_path(path)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn simplify_path(path: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (simplify-path path)\n  (-> string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec simplify_path(Path :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsimplify_path(Path) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec simplify_path(path :: String.t) :: String.t\n  def simplify_path(path) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "72",
                    "title": "Edit Distance",
                    "titleSlug": "edit-distance",
                    "difficulty": "Medium",
                    "content": "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p>\n\n<p>You have the following three operations permitted on a word:</p>\n\n<ul>\n\t<li>Insert a character</li>\n\t<li>Delete a character</li>\n\t<li>Replace a character</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nintention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int minDistance(String word1, String word2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int minDistance(char* word1, char* word2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MinDistance(string word1, string word2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function minDistance(word1: string, word2: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function minDistance($word1, $word2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun minDistance(word1: String, word2: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int minDistance(String word1, String word2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func minDistance(word1 string, word2 string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef min_distance(word1, word2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn min_distance(word1: String, word2: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (min-distance word1 word2)\n  (-> string? string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec min_distance(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nmin_distance(Word1, Word2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec min_distance(word1 :: String.t, word2 :: String.t) :: integer\n  def min_distance(word1, word2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "73",
                    "title": "Set Matrix Zeroes",
                    "titleSlug": "set-matrix-zeroes",
                    "difficulty": "Medium",
                    "content": "<p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>&#39;s.</p>\n\n<p>You must do it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg\" style=\"width: 450px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg\" style=\"width: 450px; height: 137px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n<strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[0].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li>\n\t<li>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li>\n\t<li>Could you devise a constant space solution?</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void setZeroes(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void SetZeroes(int[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction setZeroes(matrix: number[][]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function setZeroes(&$matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func setZeroes(_ matrix: inout [[Int]]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun setZeroes(matrix: Array<IntArray>): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void setZeroes(List<List<int>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func setZeroes(matrix [][]int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef set_zeroes(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn set_zeroes(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "74",
                    "title": "Search a 2D Matrix",
                    "titleSlug": "search-a-2d-matrix",
                    "difficulty": "Medium",
                    "content": "<p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p>\n\n<ul>\n\t<li>Each row is sorted in non-decreasing order.</li>\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n\n<p>Given an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code> <em>or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $target\n     * @return Boolean\n     */\n    function searchMatrix($matrix, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool searchMatrix(List<List<int>> matrix, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func searchMatrix(matrix [][]int, target int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search-matrix matrix target)\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search_matrix(Matrix :: [[integer()]], Target :: integer()) -> boolean().\nsearch_matrix(Matrix, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search_matrix(matrix :: [[integer]], target :: integer) :: boolean\n  def search_matrix(matrix, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "75",
                    "title": "Sort Colors",
                    "titleSlug": "sort-colors",
                    "difficulty": "Medium",
                    "content": "<p>Given an array <code>nums</code> with <code>n</code> objects colored red, white, or blue, sort them <strong><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a> </strong>so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p>\n\n<p>We will use the integers <code>0</code>, <code>1</code>, and <code>2</code> to represent the color red, white, and blue, respectively.</p>\n\n<p>You must solve this problem without using the library&#39;s sort function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,0,2,1,1,0]\n<strong>Output:</strong> [0,0,1,1,2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,0,1]\n<strong>Output:</strong> [0,1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>nums[i]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Could you come up with a one-pass algorithm using only&nbsp;constant extra space?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void sortColors(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void sortColors(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void SortColors(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar sortColors = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction sortColors(nums: number[]): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function sortColors(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func sortColors(_ nums: inout [Int]) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun sortColors(nums: IntArray): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void sortColors(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func sortColors(nums []int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef sort_colors(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def sortColors(nums: Array[Int]): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn sort_colors(nums: &mut Vec<i32>) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "76",
                    "title": "Minimum Window Substring",
                    "titleSlug": "minimum-window-substring",
                    "difficulty": "Hard",
                    "content": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword=\"substring-nonempty\"><strong><em>substring</em></strong></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "char* minWindow(char* s, char* t) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function minWindow(s: string, t: string): string {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  String minWindow(String s, String t) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func minWindow(s string, t string) string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (min-window s t)\n  (-> string? string? string?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S, T) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "77",
                    "title": "Combinations",
                    "titleSlug": "combinations",
                    "difficulty": "Medium",
                    "content": "<p>Given two integers <code>n</code> and <code>k</code>, return <em>all possible combinations of</em> <code>k</code> <em>numbers chosen from the range</em> <code>[1, n]</code>.</p>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, k = 2\n<strong>Output:</strong> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n<strong>Explanation:</strong> There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> [[1]]\n<strong>Explanation:</strong> There is 1 choose 1 = 1 total combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> combine(int n, int k) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combine(int n, int k, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> Combine(int n, int k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function(n, k) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function combine(n: number, k: number): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function combine($n, $k) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func combine(_ n: Int, _ k: Int) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun combine(n: Int, k: Int): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> combine(int n, int k) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func combine(n int, k int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[][]}\ndef combine(n, k)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def combine(n: Int, k: Int): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn combine(n: i32, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (combine n k)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec combine(N :: integer(), K :: integer()) -> [[integer()]].\ncombine(N, K) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec combine(n :: integer, k :: integer) :: [[integer]]\n  def combine(n, k) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "78",
                    "title": "Subsets",
                    "titleSlug": "subsets",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer array <code>nums</code> of <strong>unique</strong> elements, return <em>all possible</em> <span data-keyword=\"subset\"><em>subsets</em></span> <em>(the power set)</em>.</p>\n\n<p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [[],[0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the numbers of&nbsp;<code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> Subsets(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function subsets(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsets($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func subsets(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun subsets(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> subsets(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func subsets(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def subsets(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (subsets nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec subsets(Nums :: [integer()]) -> [[integer()]].\nsubsets(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec subsets(nums :: [integer]) :: [[integer]]\n  def subsets(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "79",
                    "title": "Word Search",
                    "titleSlug": "word-search",
                    "difficulty": "Medium",
                    "content": "<p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> <em>if</em> <code>word</code> <em>exists in the grid</em>.</p>\n\n<p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/word3.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n = board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 6</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 15</code></li>\n\t<li><code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you use search pruning to make your solution faster with a larger <code>board</code>?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool exist(char** board, int boardSize, int* boardColSize, char* word) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool Exist(char[][] board, string word) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function exist(board: string[][], word: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String $word\n     * @return Boolean\n     */\n    function exist($board, $word) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func exist(_ board: [[Character]], _ word: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun exist(board: Array<CharArray>, word: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool exist(List<List<String>> board, String word) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func exist(board [][]byte, word string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} board\n# @param {String} word\n# @return {Boolean}\ndef exist(board, word)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def exist(board: Array[Array[Char]], word: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (exist board word)\n  (-> (listof (listof char?)) string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec exist(Board :: [[char()]], Word :: unicode:unicode_binary()) -> boolean().\nexist(Board, Word) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec exist(board :: [[char]], word :: String.t) :: boolean\n  def exist(board, word) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "80",
                    "title": "Remove Duplicates from Sorted Array II",
                    "titleSlug": "remove-duplicates-from-sorted-array-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove some duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears <strong>at most twice</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p>\n\n<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>&nbsp;should hold the final result. It does not matter what you leave beyond the first&nbsp;<code>k</code>&nbsp;elements.</p>\n\n<p>Return <code>k</code><em> after placing the final result in the first </em><code>k</code><em> slots of </em><code>nums</code>.</p>\n\n<p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,2,2,3]\n<strong>Output:</strong> 5, nums = [1,1,2,2,3,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,1,2,3,3]\n<strong>Output:</strong> 7, nums = [0,0,1,1,2,3,3,_,_]\n<strong>Explanation:</strong> Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int removeDuplicates(int* nums, int numsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function removeDuplicates(nums: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func removeDuplicates(nums []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "81",
                    "title": "Search in Rotated Sorted Array II",
                    "titleSlug": "search-in-rotated-sorted-array-ii",
                    "difficulty": "Medium",
                    "content": "<p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with <strong>distinct</strong> values).</p>\n\n<p>Before being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <code>true</code><em> if </em><code>target</code><em> is in </em><code>nums</code><em>, or </em><code>false</code><em> if it is not in </em><code>nums</code><em>.</em></p>\n\n<p>You must decrease the overall operation steps as much as possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 0\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 3\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is guaranteed to be rotated at some pivot.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> This problem is similar to&nbsp;<a href=\"/problems/search-in-rotated-sorted-array/description/\" target=\"_blank\">Search in Rotated Sorted Array</a>, but&nbsp;<code>nums</code> may contain <strong>duplicates</strong>. Would this affect the runtime complexity? How and why?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool search(vector<int>& nums, int target) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool search(int* nums, int numsSize, int target) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool Search(int[] nums, int target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {boolean}\n */\nvar search = function(nums, target) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function search(nums: number[], target: number): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Boolean\n     */\n    function search($nums, $target) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool search(List<int> nums, int target) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func search(nums []int, target int) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Boolean}\ndef search(nums, target)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec search(Nums :: [integer()], Target :: integer()) -> boolean().\nsearch(Nums, Target) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: boolean\n  def search(nums, target) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "82",
                    "title": "Remove Duplicates from Sorted List II",
                    "titleSlug": "remove-duplicates-from-sorted-list-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given the <code>head</code> of a sorted linked list, <em>delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,3,4,4,5]\n<strong>Output:</strong> [1,2,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg\" style=\"width: 500px; height: 205px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,1,2,3]\n<strong>Output:</strong> [2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode DeleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function deleteDuplicates($head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun deleteDuplicates(head: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? deleteDuplicates(ListNode? head) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef delete_duplicates(head)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (delete-duplicates head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec delete_duplicates(Head :: #list_node{} | null) -> #list_node{} | null.\ndelete_duplicates(Head) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\n  def delete_duplicates(head) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "83",
                    "title": "Remove Duplicates from Sorted List",
                    "titleSlug": "remove-duplicates-from-sorted-list",
                    "difficulty": "Easy",
                    "content": "<p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list1.jpg\" style=\"width: 302px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2,3,3]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode DeleteDuplicates(ListNode head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function deleteDuplicates($head) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun deleteDuplicates(head: ListNode?): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? deleteDuplicates(ListNode? head) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef delete_duplicates(head)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (delete-duplicates head)\n  (-> (or/c list-node? #f) (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec delete_duplicates(Head :: #list_node{} | null) -> #list_node{} | null.\ndelete_duplicates(Head) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\n  def delete_duplicates(head) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "84",
                    "title": "Largest Rectangle in Histogram",
                    "titleSlug": "largest-rectangle-in-histogram",
                    "difficulty": "Hard",
                    "content": "<p>Given an array of integers <code>heights</code> representing the histogram&#39;s bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\" style=\"width: 522px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,1,5,6,2,3]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg\" style=\"width: 202px; height: 362px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int largestRectangleArea(int* heights, int heightsSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function largestRectangleArea(heights: number[]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int largestRectangleArea(List<int> heights) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func largestRectangleArea(heights []int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (largest-rectangle-area heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\nlargest_rectangle_area(Heights) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\n  def largest_rectangle_area(heights) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "85",
                    "title": "Maximal Rectangle",
                    "titleSlug": "maximal-rectangle",
                    "difficulty": "Hard",
                    "content": "<p>Given a <code>rows x cols</code>&nbsp;binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, find the largest rectangle containing only <code>1</code>&#39;s and return <em>its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" style=\"width: 402px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The maximal rectangle is shown in the above picture.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == matrix.length</code></li>\n\t<li><code>cols == matrix[i].length</code></li>\n\t<li><code>1 &lt;= row, cols &lt;= 200</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int maximalRectangle(char** matrix, int matrixSize, int* matrixColSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int MaximalRectangle(char[][] matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalRectangle = function(matrix) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function maximalRectangle(matrix: string[][]): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalRectangle($matrix) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func maximalRectangle(_ matrix: [[Character]]) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun maximalRectangle(matrix: Array<CharArray>): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int maximalRectangle(List<List<String>> matrix) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func maximalRectangle(matrix [][]byte) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_rectangle(matrix)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def maximalRectangle(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn maximal_rectangle(matrix: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (maximal-rectangle matrix)\n  (-> (listof (listof char?)) exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec maximal_rectangle(Matrix :: [[char()]]) -> integer().\nmaximal_rectangle(Matrix) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec maximal_rectangle(matrix :: [[char]]) :: integer\n  def maximal_rectangle(matrix) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "86",
                    "title": "Partition List",
                    "titleSlug": "partition-list",
                    "difficulty": "Medium",
                    "content": "<p>Given the <code>head</code> of a linked list and a value <code>x</code>, partition it such that all nodes <strong>less than</strong> <code>x</code> come before nodes <strong>greater than or equal</strong> to <code>x</code>.</p>\n\n<p>You should <strong>preserve</strong> the original relative order of the nodes in each of the two partitions.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/partition.jpg\" style=\"width: 662px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,4,3,2,5,2], x = 3\n<strong>Output:</strong> [1,2,2,4,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [2,1], x = 2\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 200]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>-200 &lt;= x &lt;= 200</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type x: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* partition(struct ListNode* head, int x) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode Partition(ListNode head, int x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */\nvar partition = function(head, x) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction partition(head: ListNode | null, x: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $x\n     * @return ListNode\n     */\n    function partition($head, $x) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func partition(_ head: ListNode?, _ x: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun partition(head: ListNode?, x: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? partition(ListNode? head, int x) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc partition(head *ListNode, x int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} x\n# @return {ListNode}\ndef partition(head, x)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def partition(head: ListNode, x: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn partition(head: Option<Box<ListNode>>, x: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (partition head x)\n  (-> (or/c list-node? #f) exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec partition(Head :: #list_node{} | null, X :: integer()) -> #list_node{} | null.\npartition(Head, X) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec partition(head :: ListNode.t | nil, x :: integer) :: ListNode.t | nil\n  def partition(head, x) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "87",
                    "title": "Scramble String",
                    "titleSlug": "scramble-string",
                    "difficulty": "Hard",
                    "content": "<p>We can scramble a string s to get a string t using the following algorithm:</p>\n\n<ol>\n\t<li>If the length of the string is 1, stop.</li>\n\t<li>If the length of the string is &gt; 1, do the following:\n\t<ul>\n\t\t<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>\n\t\t<li><strong>Randomly</strong>&nbsp;decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>\n\t\t<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One possible scenario applied on s1 is:\n&quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index.\n&quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order.\n&quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at random index each of them.\n&quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order.\n&quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;.\n&quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is &quot;rgeat&quot; which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;a&quot;, s2 = &quot;a&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>1 &lt;= s1.length &lt;= 30</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isScramble(string s1, string s2) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isScramble(String s1, String s2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isScramble(char* s1, char* s2) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsScramble(string s1, string s2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar isScramble = function(s1, s2) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isScramble(s1: string, s2: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function isScramble($s1, $s2) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isScramble(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isScramble(s1: String, s2: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isScramble(String s1, String s2) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isScramble(s1 string, s2 string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef is_scramble(s1, s2)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isScramble(s1: String, s2: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_scramble(s1: String, s2: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-scramble s1 s2)\n  (-> string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_scramble(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\nis_scramble(S1, S2) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_scramble(s1 :: String.t, s2 :: String.t) :: boolean\n  def is_scramble(s1, s2) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "88",
                    "title": "Merge Sorted Array",
                    "titleSlug": "merge-sorted-array",
                    "difficulty": "Easy",
                    "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer $m\n     * @param Integer[] $nums2\n     * @param Integer $n\n     * @return NULL\n     */\n    function merge(&$nums1, $m, $nums2, $n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  void merge(List<int> nums1, int m, List<int> nums2, int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums1\n# @param {Integer} m\n# @param {Integer[]} nums2\n# @param {Integer} n\n# @return {Void} Do not return anything, modify nums1 in-place instead.\ndef merge(nums1, m, nums2, n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {\n        \n    }\n}"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "89",
                    "title": "Gray Code",
                    "titleSlug": "gray-code",
                    "difficulty": "Medium",
                    "content": "<p>An <strong>n-bit gray code sequence</strong> is a sequence of <code>2<sup>n</sup></code> integers where:</p>\n\n<ul>\n\t<li>Every integer is in the <strong>inclusive</strong> range <code>[0, 2<sup>n</sup> - 1]</code>,</li>\n\t<li>The first integer is <code>0</code>,</li>\n\t<li>An integer appears <strong>no more than once</strong> in the sequence,</li>\n\t<li>The binary representation of every pair of <strong>adjacent</strong> integers differs by <strong>exactly one bit</strong>, and</li>\n\t<li>The binary representation of the <strong>first</strong> and <strong>last</strong> integers differs by <strong>exactly one bit</strong>.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>any valid <strong>n-bit gray code sequence</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> [0,1,3,2]\n<strong>Explanation:</strong>\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 0<u>0</u> and 0<u>1</u> differ by one bit\n- <u>0</u>1 and <u>1</u>1 differ by one bit\n- 1<u>1</u> and 1<u>0</u> differ by one bit\n- <u>1</u>0 and <u>0</u>0 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- <u>0</u>0 and <u>1</u>0 differ by one bit\n- 1<u>0</u> and 1<u>1</u> differ by one bit\n- <u>1</u>1 and <u>0</u>1 differ by one bit\n- 0<u>1</u> and 0<u>0</u> differ by one bit\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 16</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<int> grayCode(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<Integer> grayCode(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* grayCode(int n, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<int> GrayCode(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar grayCode = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function grayCode(n: number): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function grayCode($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func grayCode(_ n: Int) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun grayCode(n: Int): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<int> grayCode(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func grayCode(n int) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer[]}\ndef gray_code(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def grayCode(n: Int): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn gray_code(n: i32) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (gray-code n)\n  (-> exact-integer? (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec gray_code(N :: integer()) -> [integer()].\ngray_code(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec gray_code(n :: integer) :: [integer]\n  def gray_code(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "90",
                    "title": "Subsets II",
                    "titleSlug": "subsets-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer array <code>nums</code> that may contain duplicates, return <em>all possible</em> <span data-keyword=\"subset\"><em>subsets</em></span><em> (the power set)</em>.</p>\n\n<p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,2]\n<strong>Output:</strong> [[],[1],[1,2],[1,2,2],[2],[2,2]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [[],[0]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsetsWithDup(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<IList<int>> SubsetsWithDup(int[] nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsetsWithDup = function(nums) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function subsetsWithDup(nums: number[]): number[][] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsetsWithDup($nums) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func subsetsWithDup(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun subsetsWithDup(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<List<int>> subsetsWithDup(List<int> nums) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func subsetsWithDup(nums []int) [][]int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets_with_dup(nums)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def subsetsWithDup(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn subsets_with_dup(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (subsets-with-dup nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec subsets_with_dup(Nums :: [integer()]) -> [[integer()]].\nsubsets_with_dup(Nums) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec subsets_with_dup(nums :: [integer]) :: [[integer]]\n  def subsets_with_dup(nums) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "91",
                    "title": "Decode Ways",
                    "titleSlug": "decode-ways",
                    "difficulty": "Medium",
                    "content": "<p>You have intercepted a secret message encoded as a string of numbers. The message is <strong>decoded</strong> via the following mapping:</p>\n\n<p><code>&quot;1&quot; -&gt; &#39;A&#39;<br />\n&quot;2&quot; -&gt; &#39;B&#39;<br />\n...<br />\n&quot;25&quot; -&gt; &#39;Y&#39;<br />\n&quot;26&quot; -&gt; &#39;Z&#39;</code></p>\n\n<p>However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (<code>&quot;2&quot;</code> and <code>&quot;5&quot;</code> vs <code>&quot;25&quot;</code>).</p>\n\n<p>For example, <code>&quot;11106&quot;</code> can be decoded into:</p>\n\n<ul>\n\t<li><code>&quot;AAJF&quot;</code> with the grouping <code>(1, 1, 10, 6)</code></li>\n\t<li><code>&quot;KJF&quot;</code> with the grouping <code>(11, 10, 6)</code></li>\n\t<li>The grouping <code>(1, 11, 06)</code> is invalid because <code>&quot;06&quot;</code> is not a valid code (only <code>&quot;6&quot;</code> is valid).</li>\n</ul>\n\n<p>Note: there may be strings that are impossible to decode.<br />\n<br />\nGiven a string s containing only digits, return the <strong>number of ways</strong> to <strong>decode</strong> it. If the entire string cannot be decoded in any valid way, return <code>0</code>.</p>\n\n<p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;12&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>&quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;226&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>&quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;06&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>&quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;). In this case, the string is not a valid encoding, so return 0.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> contains only digits and may contain leading zero(s).</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int numDecodings(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int numDecodings(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int numDecodings(char* s) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int NumDecodings(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function numDecodings(s: string): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numDecodings($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func numDecodings(_ s: String) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun numDecodings(s: String): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int numDecodings(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func numDecodings(s string) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {Integer}\ndef num_decodings(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def numDecodings(s: String): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn num_decodings(s: String) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (num-decodings s)\n  (-> string? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\nnum_decodings(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec num_decodings(s :: String.t) :: integer\n  def num_decodings(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "92",
                    "title": "Reverse Linked List II",
                    "titleSlug": "reverse-linked-list-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], left = 2, right = 4\n<strong>Output:</strong> [1,4,3,2,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [5], left = 1, right = 1\n<strong>Output:</strong> [5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>-500 &lt;= Node.val &lt;= 500</code></li>\n\t<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do it in one pass?",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :type left: int\n        :type right: int\n        :rtype: Optional[ListNode]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseBetween(struct ListNode* head, int left, int right) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseBetween(ListNode head, int left, int right) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} left\n * @param {number} right\n * @return {ListNode}\n */\nvar reverseBetween = function(head, left, right) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseBetween(head: ListNode | null, left: number, right: number): ListNode | null {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $left\n     * @param Integer $right\n     * @return ListNode\n     */\n    function reverseBetween($head, $left, $right) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseBetween(_ head: ListNode?, _ left: Int, _ right: Int) -> ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseBetween(head: ListNode?, left: Int, right: Int): ListNode? {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  ListNode? reverseBetween(ListNode? head, int left, int right) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseBetween(head *ListNode, left int, right int) *ListNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} left\n# @param {Integer} right\n# @return {ListNode}\ndef reverse_between(head, left, right)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseBetween(head: ListNode, left: Int, right: Int): ListNode = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_between(head: Option<Box<ListNode>>, left: i32, right: i32) -> Option<Box<ListNode>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (reverse-between head left right)\n  (-> (or/c list-node? #f) exact-integer? exact-integer? (or/c list-node? #f))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec reverse_between(Head :: #list_node{} | null, Left :: integer(), Right :: integer()) -> #list_node{} | null.\nreverse_between(Head, Left, Right) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec reverse_between(head :: ListNode.t | nil, left :: integer, right :: integer) :: ListNode.t | nil\n  def reverse_between(head, left, right) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "93",
                    "title": "Restore IP Addresses",
                    "titleSlug": "restore-ip-addresses",
                    "difficulty": "Medium",
                    "content": "<p>A <strong>valid IP address</strong> consists of exactly four integers separated by single dots. Each integer is between <code>0</code> and <code>255</code> (<strong>inclusive</strong>) and cannot have leading zeros.</p>\n\n<ul>\n\t<li>For example, <code>&quot;0.1.2.201&quot;</code> and <code>&quot;192.168.1.1&quot;</code> are <strong>valid</strong> IP addresses, but <code>&quot;0.011.255.245&quot;</code>, <code>&quot;192.168.1.312&quot;</code> and <code>&quot;192.168@1.1&quot;</code> are <strong>invalid</strong> IP addresses.</li>\n</ul>\n\n<p>Given a string <code>s</code> containing only digits, return <em>all possible valid IP addresses that can be formed by inserting dots into </em><code>s</code>. You are <strong>not</strong> allowed to reorder or remove any digits in <code>s</code>. You may return the valid IP addresses in <strong>any</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;25525511135&quot;\n<strong>Output:</strong> [&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0000&quot;\n<strong>Output:</strong> [&quot;0.0.0.0&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;101023&quot;\n<strong>Output:</strong> [&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>s</code> consists of digits only.</li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    vector<string> restoreIpAddresses(string s) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public List<String> restoreIpAddresses(String s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def restoreIpAddresses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** restoreIpAddresses(char* s, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public IList<string> RestoreIpAddresses(string s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar restoreIpAddresses = function(s) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function restoreIpAddresses(s: string): string[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function restoreIpAddresses($s) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func restoreIpAddresses(_ s: String) -> [String] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun restoreIpAddresses(s: String): List<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  List<String> restoreIpAddresses(String s) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func restoreIpAddresses(s string) []string {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s\n# @return {String[]}\ndef restore_ip_addresses(s)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def restoreIpAddresses(s: String): List[String] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn restore_ip_addresses(s: String) -> Vec<String> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (restore-ip-addresses s)\n  (-> string? (listof string?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec restore_ip_addresses(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nrestore_ip_addresses(S) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec restore_ip_addresses(s :: String.t) :: [String.t]\n  def restore_ip_addresses(s) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "94",
                    "title": "Binary Tree Inorder Traversal",
                    "titleSlug": "binary-tree-inorder-traversal",
                    "difficulty": "Easy",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = [1,null,2,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,3,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png\" style=\"width: 200px; height: 264px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = [1,2,3,4,5,null,8,null,null,6,7,9]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[4,2,6,5,7,1,3,9,8]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/29/tree_2.png\" style=\"width: 350px; height: 286px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = []</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">root = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1]</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: List[int]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<int> inorderTraversal(TreeNode? root) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (inorder-traversal root)\n  (-> (or/c tree-node? #f) (listof exact-integer?))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\ninorder_traversal(Root) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\n  def inorder_traversal(root) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "95",
                    "title": "Unique Binary Search Trees II",
                    "titleSlug": "unique-binary-search-trees-ii",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer <code>n</code>, return <em>all the structurally unique <strong>BST&#39;</strong>s (binary search trees), which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>. Return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[Optional[TreeNode]]\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** generateTrees(int n, int* returnSize) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> GenerateTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction generateTrees(n: number): Array<TreeNode | null> {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @return TreeNode[]\n     */\n    function generateTrees($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun generateTrees(n: Int): List<TreeNode?> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  List<TreeNode?> generateTrees(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc generateTrees(n int) []*TreeNode {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer} n\n# @return {TreeNode[]}\ndef generate_trees(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (generate-trees n)\n  (-> exact-integer? (listof (or/c tree-node? #f)))\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec generate_trees(N :: integer()) -> [#tree_node{} | null].\ngenerate_trees(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec generate_trees(n :: integer) :: [TreeNode.t | nil]\n  def generate_trees(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "96",
                    "title": "Unique Binary Search Trees",
                    "titleSlug": "unique-binary-search-trees",
                    "difficulty": "Medium",
                    "content": "<p>Given an integer <code>n</code>, return <em>the number of structurally unique <strong>BST&#39;</strong>s (binary search trees) which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 19</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    int numTrees(int n) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public int numTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def numTrees(self, n: int) -> int:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "int numTrees(int n) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public int NumTrees(int n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function numTrees(n: number): number {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun numTrees(n: Int): Int {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  int numTrees(int n) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func numTrees(n int) int {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def numTrees(n: Int): Int = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (num-trees n)\n  (-> exact-integer? exact-integer?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec num_trees(N :: integer()) -> integer().\nnum_trees(N) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec num_trees(n :: integer) :: integer\n  def num_trees(n) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "97",
                    "title": "Interleaving String",
                    "titleSlug": "interleaving-string",
                    "difficulty": "Medium",
                    "content": "<p>Given strings <code>s1</code>, <code>s2</code>, and <code>s3</code>, find whether <code>s3</code> is formed by an <strong>interleaving</strong> of <code>s1</code> and <code>s2</code>.</p>\n\n<p>An <strong>interleaving</strong> of two strings <code>s</code> and <code>t</code> is a configuration where <code>s</code> and <code>t</code> are divided into <code>n</code> and <code>m</code> <span data-keyword=\"substring-nonempty\">substrings</span> respectively, such that:</p>\n\n<ul>\n\t<li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li>\n\t<li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li>\n\t<li><code>|n - m| &lt;= 1</code></li>\n\t<li>The <strong>interleaving</strong> is <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> or <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li>\n</ul>\n\n<p><strong>Note:</strong> <code>a + b</code> is the concatenation of strings <code>a</code> and <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg\" style=\"width: 561px; height: 203px;\" />\n<pre>\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbcbcac&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One way to obtain s3 is:\nSplit s1 into s1 = &quot;aa&quot; + &quot;bc&quot; + &quot;c&quot;, and s2 into s2 = &quot;dbbc&quot; + &quot;a&quot;.\nInterleaving the two splits, we get &quot;aa&quot; + &quot;dbbc&quot; + &quot;bc&quot; + &quot;a&quot; + &quot;c&quot; = &quot;aadbbcbcac&quot;.\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbbaccc&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Notice how it is impossible to interleave s2 with any other string to obtain s3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;&quot;, s2 = &quot;&quot;, s3 = &quot;&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= s3.length &lt;= 200</code></li>\n\t<li><code>s1</code>, <code>s2</code>, and <code>s3</code> consist of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it using only <code>O(s2.length)</code> additional memory space?</p>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "class Solution {\npublic:\n    bool isInterleave(string s1, string s2, string s3) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "bool isInterleave(char* s1, char* s2, char* s3) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "public class Solution {\n    public bool IsInterleave(string s1, string s2, string s3) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */\nvar isInterleave = function(s1, s2, s3) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "function isInterleave(s1: string, s2: string, s3: string): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param String $s3\n     * @return Boolean\n     */\n    function isInterleave($s1, $s2, $s3) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "class Solution {\n    func isInterleave(_ s1: String, _ s2: String, _ s3: String) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "class Solution {\n    fun isInterleave(s1: String, s2: String, s3: String): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "class Solution {\n  bool isInterleave(String s1, String s2, String s3) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "func isInterleave(s1 string, s2 string, s3 string) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# @param {String} s1\n# @param {String} s2\n# @param {String} s3\n# @return {Boolean}\ndef is_interleave(s1, s2, s3)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "object Solution {\n    def isInterleave(s1: String, s2: String, s3: String): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "impl Solution {\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "(define/contract (is-interleave s1 s2 s3)\n  (-> string? string? string? boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "-spec is_interleave(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), S3 :: unicode:unicode_binary()) -> boolean().\nis_interleave(S1, S2, S3) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "defmodule Solution do\n  @spec is_interleave(s1 :: String.t, s2 :: String.t, s3 :: String.t) :: boolean\n  def is_interleave(s1, s2, s3) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "98",
                    "title": "Validate Binary Search Tree",
                    "titleSlug": "validate-binary-search-tree",
                    "difficulty": "Medium",
                    "content": "<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>\n\n<p>A <strong>valid BST</strong> is defined as follows:</p>\n\n<ul>\n\t<li>The left <span data-keyword=\"subtree\">subtree</span> of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg\" style=\"width: 302px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg\" style=\"width: 422px; height: 292px;\" />\n<pre>\n<strong>Input:</strong> root = [5,1,4,null,null,3,6]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The root node&#39;s value is 5 but its right child&#39;s value is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isValidBST(struct TreeNode* root) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsValidBST(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isValidBST(root: TreeNode | null): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isValidBST($root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isValidBST(root: TreeNode?): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isValidBST(TreeNode? root) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_valid_bst(root)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isValidBST(root: TreeNode): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-valid-bst root)\n  (-> (or/c tree-node? #f) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_valid_bst(Root :: #tree_node{} | null) -> boolean().\nis_valid_bst(Root) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_valid_bst(root :: TreeNode.t | nil) :: boolean\n  def is_valid_bst(root) do\n    \n  end\nend"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "99",
                    "title": "Recover Binary Search Tree",
                    "titleSlug": "recover-binary-search-tree",
                    "difficulty": "Medium",
                    "content": "<p>You are given the <code>root</code> of a binary search tree (BST), where the values of <strong>exactly</strong> two nodes of the tree were swapped by mistake. <em>Recover the tree without changing its structure</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,null,null,2]\n<strong>Output:</strong> [3,1,null,null,2]\n<strong>Explanation:</strong> 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg\" style=\"width: 581px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,null,2]\n<strong>Output:</strong> [2,1,4,null,null,3]\n<strong>Explanation:</strong> 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> A solution using <code>O(n)</code> space is pretty straight-forward. Could you devise a constant <code>O(1)</code> space solution?",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void recoverTree(TreeNode* root) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nvoid recoverTree(struct TreeNode* root) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public void RecoverTree(TreeNode root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar recoverTree = function(root) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/**\n Do not return anything, modify root in-place instead.\n */\nfunction recoverTree(root: TreeNode | null): void {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return NULL\n     */\n    function recoverTree($root) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func recoverTree(_ root: TreeNode?) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun recoverTree(root: TreeNode?): Unit {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  void recoverTree(TreeNode? root) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc recoverTree(root *TreeNode)  {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Void} Do not return anything, modify root in-place instead.\ndef recover_tree(root)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def recoverTree(root: TreeNode): Unit = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn recover_tree(root: &mut Option<Rc<RefCell<TreeNode>>>) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (recover-tree root)\n  (-> (or/c tree-node? #f) void?)\n  )"
                        }
                    ]
                },
                {
                    "frontendQuestionId": "100",
                    "title": "Same Tree",
                    "titleSlug": "same-tree",
                    "difficulty": "Easy",
                    "content": "<p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p>\n\n<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,3], q = [1,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg\" style=\"width: 382px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2], q = [1,null,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,1], q = [1,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "codeSnippets": [
                        {
                            "lang": "C++",
                            "langSlug": "cpp",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        \n    }\n};"
                        },
                        {
                            "lang": "Java",
                            "langSlug": "java",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Python",
                            "langSlug": "python",
                            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: Optional[TreeNode]\n        :type q: Optional[TreeNode]\n        :rtype: bool\n        \"\"\"\n        "
                        },
                        {
                            "lang": "Python3",
                            "langSlug": "python3",
                            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        "
                        },
                        {
                            "lang": "C",
                            "langSlug": "c",
                            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSameTree(struct TreeNode* p, struct TreeNode* q) {\n    \n}"
                        },
                        {
                            "lang": "C#",
                            "langSlug": "csharp",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}"
                        },
                        {
                            "lang": "JavaScript",
                            "langSlug": "javascript",
                            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    \n};"
                        },
                        {
                            "lang": "TypeScript",
                            "langSlug": "typescript",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n    \n};"
                        },
                        {
                            "lang": "PHP",
                            "langSlug": "php",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return Boolean\n     */\n    function isSameTree($p, $q) {\n        \n    }\n}"
                        },
                        {
                            "lang": "Swift",
                            "langSlug": "swift",
                            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Kotlin",
                            "langSlug": "kotlin",
                            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {\n        \n    }\n}"
                        },
                        {
                            "lang": "Dart",
                            "langSlug": "dart",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  bool isSameTree(TreeNode? p, TreeNode? q) {\n    \n  }\n}"
                        },
                        {
                            "lang": "Go",
                            "langSlug": "golang",
                            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}"
                        },
                        {
                            "lang": "Ruby",
                            "langSlug": "ruby",
                            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {Boolean}\ndef is_same_tree(p, q)\n    \nend"
                        },
                        {
                            "lang": "Scala",
                            "langSlug": "scala",
                            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}"
                        },
                        {
                            "lang": "Rust",
                            "langSlug": "rust",
                            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_same_tree(p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}"
                        },
                        {
                            "lang": "Racket",
                            "langSlug": "racket",
                            "code": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (is-same-tree p q)\n  (-> (or/c tree-node? #f) (or/c tree-node? #f) boolean?)\n  )"
                        },
                        {
                            "lang": "Erlang",
                            "langSlug": "erlang",
                            "code": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec is_same_tree(P :: #tree_node{} | null, Q :: #tree_node{} | null) -> boolean().\nis_same_tree(P, Q) ->\n  ."
                        },
                        {
                            "lang": "Elixir",
                            "langSlug": "elixir",
                            "code": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec is_same_tree(p :: TreeNode.t | nil, q :: TreeNode.t | nil) :: boolean\n  def is_same_tree(p, q) do\n    \n  end\nend"
                        }
                    ]
                }
            ]
        }
    }
}